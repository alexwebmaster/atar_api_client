<?php
/**
 * DevicesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BaaS - Atar B2B
 *
 * Documentação da API do serviço de Banking as a Service.
 *
 * OpenAPI spec version: v3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DevicesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DevicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation payDeviceCashinPost
     *
     * Recarrega o device do usuario desejado
     *
     * @param  \Swagger\Client\Model\DeviceTransactionRequest $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DeviceBalance
     */
    public function payDeviceCashinPost($body, $atar_api_key, $atar_id, $device_id)
    {
        list($response) = $this->payDeviceCashinPostWithHttpInfo($body, $atar_api_key, $atar_id, $device_id);
        return $response;
    }

    /**
     * Operation payDeviceCashinPostWithHttpInfo
     *
     * Recarrega o device do usuario desejado
     *
     * @param  \Swagger\Client\Model\DeviceTransactionRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DeviceBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDeviceCashinPostWithHttpInfo($body, $atar_api_key, $atar_id, $device_id)
    {
        $returnType = '\Swagger\Client\Model\DeviceBalance';
        $request = $this->payDeviceCashinPostRequest($body, $atar_api_key, $atar_id, $device_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DeviceBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDeviceCashinPostAsync
     *
     * Recarrega o device do usuario desejado
     *
     * @param  \Swagger\Client\Model\DeviceTransactionRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDeviceCashinPostAsync($body, $atar_api_key, $atar_id, $device_id)
    {
        return $this->payDeviceCashinPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $device_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDeviceCashinPostAsyncWithHttpInfo
     *
     * Recarrega o device do usuario desejado
     *
     * @param  \Swagger\Client\Model\DeviceTransactionRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDeviceCashinPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $device_id)
    {
        $returnType = '\Swagger\Client\Model\DeviceBalance';
        $request = $this->payDeviceCashinPostRequest($body, $atar_api_key, $atar_id, $device_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDeviceCashinPost'
     *
     * @param  \Swagger\Client\Model\DeviceTransactionRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDeviceCashinPostRequest($body, $atar_api_key, $atar_id, $device_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payDeviceCashinPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDeviceCashinPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDeviceCashinPost'
            );
        }
        // verify the required parameter 'device_id' is set
        if ($device_id === null || (is_array($device_id) && count($device_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling payDeviceCashinPost'
            );
        }

        $resourcePath = '/devices/{deviceId}/cashin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($device_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deviceId' . '}',
                ObjectSerializer::toPathValue($device_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDeviceCashoutPost
     *
     * Descarrega o device do usuario desejado
     *
     * @param  \Swagger\Client\Model\DeviceTransactionRequest $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DeviceBalance
     */
    public function payDeviceCashoutPost($body, $atar_api_key, $atar_id, $device_id)
    {
        list($response) = $this->payDeviceCashoutPostWithHttpInfo($body, $atar_api_key, $atar_id, $device_id);
        return $response;
    }

    /**
     * Operation payDeviceCashoutPostWithHttpInfo
     *
     * Descarrega o device do usuario desejado
     *
     * @param  \Swagger\Client\Model\DeviceTransactionRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DeviceBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDeviceCashoutPostWithHttpInfo($body, $atar_api_key, $atar_id, $device_id)
    {
        $returnType = '\Swagger\Client\Model\DeviceBalance';
        $request = $this->payDeviceCashoutPostRequest($body, $atar_api_key, $atar_id, $device_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DeviceBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDeviceCashoutPostAsync
     *
     * Descarrega o device do usuario desejado
     *
     * @param  \Swagger\Client\Model\DeviceTransactionRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDeviceCashoutPostAsync($body, $atar_api_key, $atar_id, $device_id)
    {
        return $this->payDeviceCashoutPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $device_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDeviceCashoutPostAsyncWithHttpInfo
     *
     * Descarrega o device do usuario desejado
     *
     * @param  \Swagger\Client\Model\DeviceTransactionRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDeviceCashoutPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $device_id)
    {
        $returnType = '\Swagger\Client\Model\DeviceBalance';
        $request = $this->payDeviceCashoutPostRequest($body, $atar_api_key, $atar_id, $device_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDeviceCashoutPost'
     *
     * @param  \Swagger\Client\Model\DeviceTransactionRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDeviceCashoutPostRequest($body, $atar_api_key, $atar_id, $device_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payDeviceCashoutPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDeviceCashoutPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDeviceCashoutPost'
            );
        }
        // verify the required parameter 'device_id' is set
        if ($device_id === null || (is_array($device_id) && count($device_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling payDeviceCashoutPost'
            );
        }

        $resourcePath = '/devices/{deviceId}/cashout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($device_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deviceId' . '}',
                ObjectSerializer::toPathValue($device_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesCancelPost
     *
     * Cancela um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceId $body Id do dispositivo (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payDevicesCancelPost($body, $atar_api_key, $atar_id)
    {
        $this->payDevicesCancelPostWithHttpInfo($body, $atar_api_key, $atar_id);
    }

    /**
     * Operation payDevicesCancelPostWithHttpInfo
     *
     * Cancela um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceId $body Id do dispositivo (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesCancelPostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '';
        $request = $this->payDevicesCancelPostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesCancelPostAsync
     *
     * Cancela um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceId $body Id do dispositivo (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesCancelPostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payDevicesCancelPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesCancelPostAsyncWithHttpInfo
     *
     * Cancela um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceId $body Id do dispositivo (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesCancelPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '';
        $request = $this->payDevicesCancelPostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesCancelPost'
     *
     * @param  \Swagger\Client\Model\DeviceId $body Id do dispositivo (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesCancelPostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payDevicesCancelPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesCancelPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesCancelPost'
            );
        }

        $resourcePath = '/devices/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesEnablePost
     *
     * Ativa um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceRequest $body Codigo de ativacao e PIN do dispositivo a ser ativado (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Device
     */
    public function payDevicesEnablePost($body, $atar_api_key, $atar_id)
    {
        list($response) = $this->payDevicesEnablePostWithHttpInfo($body, $atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payDevicesEnablePostWithHttpInfo
     *
     * Ativa um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceRequest $body Codigo de ativacao e PIN do dispositivo a ser ativado (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Device, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesEnablePostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Device';
        $request = $this->payDevicesEnablePostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Device',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesEnablePostAsync
     *
     * Ativa um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceRequest $body Codigo de ativacao e PIN do dispositivo a ser ativado (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesEnablePostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payDevicesEnablePostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesEnablePostAsyncWithHttpInfo
     *
     * Ativa um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceRequest $body Codigo de ativacao e PIN do dispositivo a ser ativado (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesEnablePostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Device';
        $request = $this->payDevicesEnablePostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesEnablePost'
     *
     * @param  \Swagger\Client\Model\DeviceRequest $body Codigo de ativacao e PIN do dispositivo a ser ativado (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesEnablePostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payDevicesEnablePost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesEnablePost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesEnablePost'
            );
        }

        $resourcePath = '/devices/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesFeesGet
     *
     * Retorna as taxas do device
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CashinLimits
     */
    public function payDevicesFeesGet($atar_api_key, $atar_id, $device_id)
    {
        list($response) = $this->payDevicesFeesGetWithHttpInfo($atar_api_key, $atar_id, $device_id);
        return $response;
    }

    /**
     * Operation payDevicesFeesGetWithHttpInfo
     *
     * Retorna as taxas do device
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CashinLimits, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesFeesGetWithHttpInfo($atar_api_key, $atar_id, $device_id)
    {
        $returnType = '\Swagger\Client\Model\CashinLimits';
        $request = $this->payDevicesFeesGetRequest($atar_api_key, $atar_id, $device_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CashinLimits',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesFeesGetAsync
     *
     * Retorna as taxas do device
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesFeesGetAsync($atar_api_key, $atar_id, $device_id)
    {
        return $this->payDevicesFeesGetAsyncWithHttpInfo($atar_api_key, $atar_id, $device_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesFeesGetAsyncWithHttpInfo
     *
     * Retorna as taxas do device
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesFeesGetAsyncWithHttpInfo($atar_api_key, $atar_id, $device_id)
    {
        $returnType = '\Swagger\Client\Model\CashinLimits';
        $request = $this->payDevicesFeesGetRequest($atar_api_key, $atar_id, $device_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesFeesGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesFeesGetRequest($atar_api_key, $atar_id, $device_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesFeesGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesFeesGet'
            );
        }
        // verify the required parameter 'device_id' is set
        if ($device_id === null || (is_array($device_id) && count($device_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling payDevicesFeesGet'
            );
        }

        $resourcePath = '/devices/{deviceId}/fees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($device_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deviceId' . '}',
                ObjectSerializer::toPathValue($device_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesGet
     *
     * Recupera dispositivos do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Device[]
     */
    public function payDevicesGet($atar_api_key, $atar_id)
    {
        list($response) = $this->payDevicesGetWithHttpInfo($atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payDevicesGetWithHttpInfo
     *
     * Recupera dispositivos do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Device[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesGetWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Device[]';
        $request = $this->payDevicesGetRequest($atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Device[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesGetAsync
     *
     * Recupera dispositivos do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesGetAsync($atar_api_key, $atar_id)
    {
        return $this->payDevicesGetAsyncWithHttpInfo($atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesGetAsyncWithHttpInfo
     *
     * Recupera dispositivos do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesGetAsyncWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Device[]';
        $request = $this->payDevicesGetRequest($atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesGetRequest($atar_api_key, $atar_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesGet'
            );
        }

        $resourcePath = '/devices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesIdGet
     *
     * Recupera um dispositivo do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Device
     */
    public function payDevicesIdGet($atar_api_key, $atar_id, $device_id)
    {
        list($response) = $this->payDevicesIdGetWithHttpInfo($atar_api_key, $atar_id, $device_id);
        return $response;
    }

    /**
     * Operation payDevicesIdGetWithHttpInfo
     *
     * Recupera um dispositivo do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Device, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesIdGetWithHttpInfo($atar_api_key, $atar_id, $device_id)
    {
        $returnType = '\Swagger\Client\Model\Device';
        $request = $this->payDevicesIdGetRequest($atar_api_key, $atar_id, $device_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Device',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesIdGetAsync
     *
     * Recupera um dispositivo do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesIdGetAsync($atar_api_key, $atar_id, $device_id)
    {
        return $this->payDevicesIdGetAsyncWithHttpInfo($atar_api_key, $atar_id, $device_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesIdGetAsyncWithHttpInfo
     *
     * Recupera um dispositivo do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesIdGetAsyncWithHttpInfo($atar_api_key, $atar_id, $device_id)
    {
        $returnType = '\Swagger\Client\Model\Device';
        $request = $this->payDevicesIdGetRequest($atar_api_key, $atar_id, $device_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesIdGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesIdGetRequest($atar_api_key, $atar_id, $device_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesIdGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesIdGet'
            );
        }
        // verify the required parameter 'device_id' is set
        if ($device_id === null || (is_array($device_id) && count($device_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling payDevicesIdGet'
            );
        }

        $resourcePath = '/devices/{deviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($device_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deviceId' . '}',
                ObjectSerializer::toPathValue($device_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesLockPut
     *
     * Bloqueia temporariamente o dispositivo
     *
     * @param  \Swagger\Client\Model\DeviceId $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payDevicesLockPut($body, $atar_api_key, $atar_id)
    {
        $this->payDevicesLockPutWithHttpInfo($body, $atar_api_key, $atar_id);
    }

    /**
     * Operation payDevicesLockPutWithHttpInfo
     *
     * Bloqueia temporariamente o dispositivo
     *
     * @param  \Swagger\Client\Model\DeviceId $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesLockPutWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '';
        $request = $this->payDevicesLockPutRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesLockPutAsync
     *
     * Bloqueia temporariamente o dispositivo
     *
     * @param  \Swagger\Client\Model\DeviceId $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesLockPutAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payDevicesLockPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesLockPutAsyncWithHttpInfo
     *
     * Bloqueia temporariamente o dispositivo
     *
     * @param  \Swagger\Client\Model\DeviceId $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesLockPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '';
        $request = $this->payDevicesLockPutRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesLockPut'
     *
     * @param  \Swagger\Client\Model\DeviceId $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesLockPutRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payDevicesLockPut'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesLockPut'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesLockPut'
            );
        }

        $resourcePath = '/devices/lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesNewExternalPost
     *
     * Cria um dispositivo externo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceNewExternalRequest $body Part number do dispositivo, informações de endereço, id do cartão e emissora (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DeviceCreated
     */
    public function payDevicesNewExternalPost($body, $atar_api_key)
    {
        list($response) = $this->payDevicesNewExternalPostWithHttpInfo($body, $atar_api_key);
        return $response;
    }

    /**
     * Operation payDevicesNewExternalPostWithHttpInfo
     *
     * Cria um dispositivo externo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceNewExternalRequest $body Part number do dispositivo, informações de endereço, id do cartão e emissora (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DeviceCreated, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesNewExternalPostWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\DeviceCreated';
        $request = $this->payDevicesNewExternalPostRequest($body, $atar_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DeviceCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesNewExternalPostAsync
     *
     * Cria um dispositivo externo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceNewExternalRequest $body Part number do dispositivo, informações de endereço, id do cartão e emissora (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesNewExternalPostAsync($body, $atar_api_key)
    {
        return $this->payDevicesNewExternalPostAsyncWithHttpInfo($body, $atar_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesNewExternalPostAsyncWithHttpInfo
     *
     * Cria um dispositivo externo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceNewExternalRequest $body Part number do dispositivo, informações de endereço, id do cartão e emissora (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesNewExternalPostAsyncWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\DeviceCreated';
        $request = $this->payDevicesNewExternalPostRequest($body, $atar_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesNewExternalPost'
     *
     * @param  \Swagger\Client\Model\DeviceNewExternalRequest $body Part number do dispositivo, informações de endereço, id do cartão e emissora (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesNewExternalPostRequest($body, $atar_api_key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payDevicesNewExternalPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesNewExternalPost'
            );
        }

        $resourcePath = '/devices/new-external-device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesNewPost
     *
     * Cria um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceNewRequest $body Part number do dispositivo e informações de endereço (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DeviceCreated
     */
    public function payDevicesNewPost($body, $atar_api_key)
    {
        list($response) = $this->payDevicesNewPostWithHttpInfo($body, $atar_api_key);
        return $response;
    }

    /**
     * Operation payDevicesNewPostWithHttpInfo
     *
     * Cria um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceNewRequest $body Part number do dispositivo e informações de endereço (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DeviceCreated, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesNewPostWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\DeviceCreated';
        $request = $this->payDevicesNewPostRequest($body, $atar_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DeviceCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesNewPostAsync
     *
     * Cria um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceNewRequest $body Part number do dispositivo e informações de endereço (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesNewPostAsync($body, $atar_api_key)
    {
        return $this->payDevicesNewPostAsyncWithHttpInfo($body, $atar_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesNewPostAsyncWithHttpInfo
     *
     * Cria um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceNewRequest $body Part number do dispositivo e informações de endereço (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesNewPostAsyncWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\DeviceCreated';
        $request = $this->payDevicesNewPostRequest($body, $atar_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesNewPost'
     *
     * @param  \Swagger\Client\Model\DeviceNewRequest $body Part number do dispositivo e informações de endereço (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesNewPostRequest($body, $atar_api_key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payDevicesNewPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesNewPost'
            );
        }

        $resourcePath = '/devices/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesPinPut
     *
     * Altera a senha do dispositivo
     *
     * @param  \Swagger\Client\Model\PIN $body Novo PIN (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payDevicesPinPut($body, $atar_api_key, $atar_id, $device_id)
    {
        $this->payDevicesPinPutWithHttpInfo($body, $atar_api_key, $atar_id, $device_id);
    }

    /**
     * Operation payDevicesPinPutWithHttpInfo
     *
     * Altera a senha do dispositivo
     *
     * @param  \Swagger\Client\Model\PIN $body Novo PIN (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesPinPutWithHttpInfo($body, $atar_api_key, $atar_id, $device_id)
    {
        $returnType = '';
        $request = $this->payDevicesPinPutRequest($body, $atar_api_key, $atar_id, $device_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesPinPutAsync
     *
     * Altera a senha do dispositivo
     *
     * @param  \Swagger\Client\Model\PIN $body Novo PIN (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesPinPutAsync($body, $atar_api_key, $atar_id, $device_id)
    {
        return $this->payDevicesPinPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $device_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesPinPutAsyncWithHttpInfo
     *
     * Altera a senha do dispositivo
     *
     * @param  \Swagger\Client\Model\PIN $body Novo PIN (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesPinPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $device_id)
    {
        $returnType = '';
        $request = $this->payDevicesPinPutRequest($body, $atar_api_key, $atar_id, $device_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesPinPut'
     *
     * @param  \Swagger\Client\Model\PIN $body Novo PIN (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesPinPutRequest($body, $atar_api_key, $atar_id, $device_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payDevicesPinPut'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesPinPut'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesPinPut'
            );
        }
        // verify the required parameter 'device_id' is set
        if ($device_id === null || (is_array($device_id) && count($device_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling payDevicesPinPut'
            );
        }

        $resourcePath = '/devices/{deviceId}/pin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($device_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deviceId' . '}',
                ObjectSerializer::toPathValue($device_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesReplacePost
     *
     * Troca um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceReplaceRequest $body Codigo ativacao antigo, Codigo de ativacao e PIN do dispositivo a ser ativado (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Device
     */
    public function payDevicesReplacePost($body, $atar_api_key, $atar_id)
    {
        list($response) = $this->payDevicesReplacePostWithHttpInfo($body, $atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payDevicesReplacePostWithHttpInfo
     *
     * Troca um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceReplaceRequest $body Codigo ativacao antigo, Codigo de ativacao e PIN do dispositivo a ser ativado (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Device, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesReplacePostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Device';
        $request = $this->payDevicesReplacePostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Device',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesReplacePostAsync
     *
     * Troca um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceReplaceRequest $body Codigo ativacao antigo, Codigo de ativacao e PIN do dispositivo a ser ativado (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesReplacePostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payDevicesReplacePostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesReplacePostAsyncWithHttpInfo
     *
     * Troca um dispositivo para o usuario
     *
     * @param  \Swagger\Client\Model\DeviceReplaceRequest $body Codigo ativacao antigo, Codigo de ativacao e PIN do dispositivo a ser ativado (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesReplacePostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Device';
        $request = $this->payDevicesReplacePostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesReplacePost'
     *
     * @param  \Swagger\Client\Model\DeviceReplaceRequest $body Codigo ativacao antigo, Codigo de ativacao e PIN do dispositivo a ser ativado (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesReplacePostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payDevicesReplacePost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesReplacePost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesReplacePost'
            );
        }

        $resourcePath = '/devices/replace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesUnlockPut
     *
     * Desbloqueia o dispositivo
     *
     * @param  \Swagger\Client\Model\DeviceId $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payDevicesUnlockPut($body, $atar_api_key, $atar_id)
    {
        $this->payDevicesUnlockPutWithHttpInfo($body, $atar_api_key, $atar_id);
    }

    /**
     * Operation payDevicesUnlockPutWithHttpInfo
     *
     * Desbloqueia o dispositivo
     *
     * @param  \Swagger\Client\Model\DeviceId $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesUnlockPutWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '';
        $request = $this->payDevicesUnlockPutRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesUnlockPutAsync
     *
     * Desbloqueia o dispositivo
     *
     * @param  \Swagger\Client\Model\DeviceId $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesUnlockPutAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payDevicesUnlockPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesUnlockPutAsyncWithHttpInfo
     *
     * Desbloqueia o dispositivo
     *
     * @param  \Swagger\Client\Model\DeviceId $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesUnlockPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '';
        $request = $this->payDevicesUnlockPutRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesUnlockPut'
     *
     * @param  \Swagger\Client\Model\DeviceId $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesUnlockPutRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payDevicesUnlockPut'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesUnlockPut'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesUnlockPut'
            );
        }

        $resourcePath = '/devices/unlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesVirtualCardDelete
     *
     * Retorna o cartão virtual pelo id
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payDevicesVirtualCardDelete($atar_api_key, $atar_id, $device_id)
    {
        $this->payDevicesVirtualCardDeleteWithHttpInfo($atar_api_key, $atar_id, $device_id);
    }

    /**
     * Operation payDevicesVirtualCardDeleteWithHttpInfo
     *
     * Retorna o cartão virtual pelo id
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesVirtualCardDeleteWithHttpInfo($atar_api_key, $atar_id, $device_id)
    {
        $returnType = '';
        $request = $this->payDevicesVirtualCardDeleteRequest($atar_api_key, $atar_id, $device_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesVirtualCardDeleteAsync
     *
     * Retorna o cartão virtual pelo id
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesVirtualCardDeleteAsync($atar_api_key, $atar_id, $device_id)
    {
        return $this->payDevicesVirtualCardDeleteAsyncWithHttpInfo($atar_api_key, $atar_id, $device_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesVirtualCardDeleteAsyncWithHttpInfo
     *
     * Retorna o cartão virtual pelo id
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesVirtualCardDeleteAsyncWithHttpInfo($atar_api_key, $atar_id, $device_id)
    {
        $returnType = '';
        $request = $this->payDevicesVirtualCardDeleteRequest($atar_api_key, $atar_id, $device_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesVirtualCardDelete'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesVirtualCardDeleteRequest($atar_api_key, $atar_id, $device_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesVirtualCardDelete'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesVirtualCardDelete'
            );
        }
        // verify the required parameter 'device_id' is set
        if ($device_id === null || (is_array($device_id) && count($device_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling payDevicesVirtualCardDelete'
            );
        }

        $resourcePath = '/devices/virtual-card/{deviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($device_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deviceId' . '}',
                ObjectSerializer::toPathValue($device_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesVirtualCardGet
     *
     * Retorna o cartão virtual pelo id
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Device
     */
    public function payDevicesVirtualCardGet($atar_api_key, $atar_id, $device_id)
    {
        list($response) = $this->payDevicesVirtualCardGetWithHttpInfo($atar_api_key, $atar_id, $device_id);
        return $response;
    }

    /**
     * Operation payDevicesVirtualCardGetWithHttpInfo
     *
     * Retorna o cartão virtual pelo id
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Device, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesVirtualCardGetWithHttpInfo($atar_api_key, $atar_id, $device_id)
    {
        $returnType = '\Swagger\Client\Model\Device';
        $request = $this->payDevicesVirtualCardGetRequest($atar_api_key, $atar_id, $device_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Device',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesVirtualCardGetAsync
     *
     * Retorna o cartão virtual pelo id
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesVirtualCardGetAsync($atar_api_key, $atar_id, $device_id)
    {
        return $this->payDevicesVirtualCardGetAsyncWithHttpInfo($atar_api_key, $atar_id, $device_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesVirtualCardGetAsyncWithHttpInfo
     *
     * Retorna o cartão virtual pelo id
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesVirtualCardGetAsyncWithHttpInfo($atar_api_key, $atar_id, $device_id)
    {
        $returnType = '\Swagger\Client\Model\Device';
        $request = $this->payDevicesVirtualCardGetRequest($atar_api_key, $atar_id, $device_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesVirtualCardGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_id ID do dispositivo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesVirtualCardGetRequest($atar_api_key, $atar_id, $device_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesVirtualCardGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesVirtualCardGet'
            );
        }
        // verify the required parameter 'device_id' is set
        if ($device_id === null || (is_array($device_id) && count($device_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_id when calling payDevicesVirtualCardGet'
            );
        }

        $resourcePath = '/devices/virtual-card/{deviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($device_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deviceId' . '}',
                ObjectSerializer::toPathValue($device_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesVirtualCardPost
     *
     * Gera um novo cartão virtual
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Device
     */
    public function payDevicesVirtualCardPost($atar_api_key, $atar_id)
    {
        list($response) = $this->payDevicesVirtualCardPostWithHttpInfo($atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payDevicesVirtualCardPostWithHttpInfo
     *
     * Gera um novo cartão virtual
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Device, HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesVirtualCardPostWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Device';
        $request = $this->payDevicesVirtualCardPostRequest($atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Device',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesVirtualCardPostAsync
     *
     * Gera um novo cartão virtual
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesVirtualCardPostAsync($atar_api_key, $atar_id)
    {
        return $this->payDevicesVirtualCardPostAsyncWithHttpInfo($atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesVirtualCardPostAsyncWithHttpInfo
     *
     * Gera um novo cartão virtual
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesVirtualCardPostAsyncWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Device';
        $request = $this->payDevicesVirtualCardPostRequest($atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesVirtualCardPost'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesVirtualCardPostRequest($atar_api_key, $atar_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesVirtualCardPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesVirtualCardPost'
            );
        }

        $resourcePath = '/devices/virtual-card';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payDevicesVirtualCardsGet
     *
     * Recupera os cartões virtuais do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Device[]
     */
    public function payDevicesVirtualCardsGet($atar_api_key, $atar_id)
    {
        list($response) = $this->payDevicesVirtualCardsGetWithHttpInfo($atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payDevicesVirtualCardsGetWithHttpInfo
     *
     * Recupera os cartões virtuais do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Device[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payDevicesVirtualCardsGetWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Device[]';
        $request = $this->payDevicesVirtualCardsGetRequest($atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Device[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payDevicesVirtualCardsGetAsync
     *
     * Recupera os cartões virtuais do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesVirtualCardsGetAsync($atar_api_key, $atar_id)
    {
        return $this->payDevicesVirtualCardsGetAsyncWithHttpInfo($atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payDevicesVirtualCardsGetAsyncWithHttpInfo
     *
     * Recupera os cartões virtuais do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payDevicesVirtualCardsGetAsyncWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Device[]';
        $request = $this->payDevicesVirtualCardsGetRequest($atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payDevicesVirtualCardsGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payDevicesVirtualCardsGetRequest($atar_api_key, $atar_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payDevicesVirtualCardsGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payDevicesVirtualCardsGet'
            );
        }

        $resourcePath = '/devices/virtual-card';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
