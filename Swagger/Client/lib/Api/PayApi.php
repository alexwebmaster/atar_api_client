<?php
/**
 * PayApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BaaS - Atar B2B
 *
 * Documentação da API do serviço de Banking as a Service.
 *
 * OpenAPI spec version: v3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PayApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation payBalanceGet
     *
     * Recupera o saldo do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Balance
     */
    public function payBalanceGet($atar_api_key, $atar_id)
    {
        list($response) = $this->payBalanceGetWithHttpInfo($atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payBalanceGetWithHttpInfo
     *
     * Recupera o saldo do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Balance, HTTP status code, HTTP response headers (array of strings)
     */
    public function payBalanceGetWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Balance';
        $request = $this->payBalanceGetRequest($atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Balance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payBalanceGetAsync
     *
     * Recupera o saldo do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payBalanceGetAsync($atar_api_key, $atar_id)
    {
        return $this->payBalanceGetAsyncWithHttpInfo($atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payBalanceGetAsyncWithHttpInfo
     *
     * Recupera o saldo do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payBalanceGetAsyncWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Balance';
        $request = $this->payBalanceGetRequest($atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payBalanceGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payBalanceGetRequest($atar_api_key, $atar_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payBalanceGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payBalanceGet'
            );
        }

        $resourcePath = '/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payBoletoFeesGet
     *
     * Recupera taxas de cash-in do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CashinLimits
     */
    public function payBoletoFeesGet($atar_api_key, $atar_id)
    {
        list($response) = $this->payBoletoFeesGetWithHttpInfo($atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payBoletoFeesGetWithHttpInfo
     *
     * Recupera taxas de cash-in do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CashinLimits, HTTP status code, HTTP response headers (array of strings)
     */
    public function payBoletoFeesGetWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\CashinLimits';
        $request = $this->payBoletoFeesGetRequest($atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CashinLimits',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payBoletoFeesGetAsync
     *
     * Recupera taxas de cash-in do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payBoletoFeesGetAsync($atar_api_key, $atar_id)
    {
        return $this->payBoletoFeesGetAsyncWithHttpInfo($atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payBoletoFeesGetAsyncWithHttpInfo
     *
     * Recupera taxas de cash-in do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payBoletoFeesGetAsyncWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\CashinLimits';
        $request = $this->payBoletoFeesGetRequest($atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payBoletoFeesGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payBoletoFeesGetRequest($atar_api_key, $atar_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payBoletoFeesGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payBoletoFeesGet'
            );
        }

        $resourcePath = '/cashin/boleto/fees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payBoletoGet
     *
     * Recupera boleto do cash-in requisitado
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $cashin_id ID do cash-in requisitado (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Boleto
     */
    public function payBoletoGet($atar_api_key, $atar_id, $cashin_id)
    {
        list($response) = $this->payBoletoGetWithHttpInfo($atar_api_key, $atar_id, $cashin_id);
        return $response;
    }

    /**
     * Operation payBoletoGetWithHttpInfo
     *
     * Recupera boleto do cash-in requisitado
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $cashin_id ID do cash-in requisitado (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Boleto, HTTP status code, HTTP response headers (array of strings)
     */
    public function payBoletoGetWithHttpInfo($atar_api_key, $atar_id, $cashin_id)
    {
        $returnType = '\Swagger\Client\Model\Boleto';
        $request = $this->payBoletoGetRequest($atar_api_key, $atar_id, $cashin_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Boleto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payBoletoGetAsync
     *
     * Recupera boleto do cash-in requisitado
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $cashin_id ID do cash-in requisitado (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payBoletoGetAsync($atar_api_key, $atar_id, $cashin_id)
    {
        return $this->payBoletoGetAsyncWithHttpInfo($atar_api_key, $atar_id, $cashin_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payBoletoGetAsyncWithHttpInfo
     *
     * Recupera boleto do cash-in requisitado
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $cashin_id ID do cash-in requisitado (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payBoletoGetAsyncWithHttpInfo($atar_api_key, $atar_id, $cashin_id)
    {
        $returnType = '\Swagger\Client\Model\Boleto';
        $request = $this->payBoletoGetRequest($atar_api_key, $atar_id, $cashin_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payBoletoGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $cashin_id ID do cash-in requisitado (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payBoletoGetRequest($atar_api_key, $atar_id, $cashin_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payBoletoGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payBoletoGet'
            );
        }
        // verify the required parameter 'cashin_id' is set
        if ($cashin_id === null || (is_array($cashin_id) && count($cashin_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cashin_id when calling payBoletoGet'
            );
        }

        $resourcePath = '/cashin/boleto/{cashinId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($cashin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cashinId' . '}',
                ObjectSerializer::toPathValue($cashin_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payBoletoPost
     *
     * Gera boleto de cash-in
     *
     * @param  \Swagger\Client\Model\CashinRequest $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Boleto
     */
    public function payBoletoPost($body, $atar_api_key, $atar_id)
    {
        list($response) = $this->payBoletoPostWithHttpInfo($body, $atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payBoletoPostWithHttpInfo
     *
     * Gera boleto de cash-in
     *
     * @param  \Swagger\Client\Model\CashinRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Boleto, HTTP status code, HTTP response headers (array of strings)
     */
    public function payBoletoPostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Boleto';
        $request = $this->payBoletoPostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Boleto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payBoletoPostAsync
     *
     * Gera boleto de cash-in
     *
     * @param  \Swagger\Client\Model\CashinRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payBoletoPostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payBoletoPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payBoletoPostAsyncWithHttpInfo
     *
     * Gera boleto de cash-in
     *
     * @param  \Swagger\Client\Model\CashinRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payBoletoPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Boleto';
        $request = $this->payBoletoPostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payBoletoPost'
     *
     * @param  \Swagger\Client\Model\CashinRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payBoletoPostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payBoletoPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payBoletoPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payBoletoPost'
            );
        }

        $resourcePath = '/cashin/boleto';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCashinOptionsGet
     *
     * retorna as opções disponíveis para cashin, e as tarifas/limites, envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CashinOptions
     */
    public function payCashinOptionsGet($atar_api_key, $atar_id)
    {
        list($response) = $this->payCashinOptionsGetWithHttpInfo($atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payCashinOptionsGetWithHttpInfo
     *
     * retorna as opções disponíveis para cashin, e as tarifas/limites, envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CashinOptions, HTTP status code, HTTP response headers (array of strings)
     */
    public function payCashinOptionsGetWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\CashinOptions';
        $request = $this->payCashinOptionsGetRequest($atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CashinOptions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payCashinOptionsGetAsync
     *
     * retorna as opções disponíveis para cashin, e as tarifas/limites, envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashinOptionsGetAsync($atar_api_key, $atar_id)
    {
        return $this->payCashinOptionsGetAsyncWithHttpInfo($atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCashinOptionsGetAsyncWithHttpInfo
     *
     * retorna as opções disponíveis para cashin, e as tarifas/limites, envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashinOptionsGetAsyncWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\CashinOptions';
        $request = $this->payCashinOptionsGetRequest($atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCashinOptionsGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCashinOptionsGetRequest($atar_api_key, $atar_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCashinOptionsGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payCashinOptionsGet'
            );
        }

        $resourcePath = '/cashin/options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCashinTedReceiptPost
     *
     * Inicia chat via intercom para envio do comprovante
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $bank_id Id do banco (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payCashinTedReceiptPost($atar_api_key, $atar_id, $bank_id)
    {
        $this->payCashinTedReceiptPostWithHttpInfo($atar_api_key, $atar_id, $bank_id);
    }

    /**
     * Operation payCashinTedReceiptPostWithHttpInfo
     *
     * Inicia chat via intercom para envio do comprovante
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $bank_id Id do banco (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payCashinTedReceiptPostWithHttpInfo($atar_api_key, $atar_id, $bank_id)
    {
        $returnType = '';
        $request = $this->payCashinTedReceiptPostRequest($atar_api_key, $atar_id, $bank_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payCashinTedReceiptPostAsync
     *
     * Inicia chat via intercom para envio do comprovante
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $bank_id Id do banco (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashinTedReceiptPostAsync($atar_api_key, $atar_id, $bank_id)
    {
        return $this->payCashinTedReceiptPostAsyncWithHttpInfo($atar_api_key, $atar_id, $bank_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCashinTedReceiptPostAsyncWithHttpInfo
     *
     * Inicia chat via intercom para envio do comprovante
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $bank_id Id do banco (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashinTedReceiptPostAsyncWithHttpInfo($atar_api_key, $atar_id, $bank_id)
    {
        $returnType = '';
        $request = $this->payCashinTedReceiptPostRequest($atar_api_key, $atar_id, $bank_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCashinTedReceiptPost'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $bank_id Id do banco (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCashinTedReceiptPostRequest($atar_api_key, $atar_id, $bank_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCashinTedReceiptPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payCashinTedReceiptPost'
            );
        }
        // verify the required parameter 'bank_id' is set
        if ($bank_id === null || (is_array($bank_id) && count($bank_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_id when calling payCashinTedReceiptPost'
            );
        }

        $resourcePath = '/cashin/ted/start-receipt-chat/{bankId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($bank_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankId' . '}',
                ObjectSerializer::toPathValue($bank_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCashoutBoletoDetailsGet
     *
     * Realiza a consulta dos dados de um boleto
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $number Codigo de barras ou linha digitavel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Boleto
     */
    public function payCashoutBoletoDetailsGet($atar_api_key, $atar_id, $number)
    {
        list($response) = $this->payCashoutBoletoDetailsGetWithHttpInfo($atar_api_key, $atar_id, $number);
        return $response;
    }

    /**
     * Operation payCashoutBoletoDetailsGetWithHttpInfo
     *
     * Realiza a consulta dos dados de um boleto
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $number Codigo de barras ou linha digitavel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Boleto, HTTP status code, HTTP response headers (array of strings)
     */
    public function payCashoutBoletoDetailsGetWithHttpInfo($atar_api_key, $atar_id, $number)
    {
        $returnType = '\Swagger\Client\Model\Boleto';
        $request = $this->payCashoutBoletoDetailsGetRequest($atar_api_key, $atar_id, $number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Boleto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payCashoutBoletoDetailsGetAsync
     *
     * Realiza a consulta dos dados de um boleto
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $number Codigo de barras ou linha digitavel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashoutBoletoDetailsGetAsync($atar_api_key, $atar_id, $number)
    {
        return $this->payCashoutBoletoDetailsGetAsyncWithHttpInfo($atar_api_key, $atar_id, $number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCashoutBoletoDetailsGetAsyncWithHttpInfo
     *
     * Realiza a consulta dos dados de um boleto
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $number Codigo de barras ou linha digitavel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashoutBoletoDetailsGetAsyncWithHttpInfo($atar_api_key, $atar_id, $number)
    {
        $returnType = '\Swagger\Client\Model\Boleto';
        $request = $this->payCashoutBoletoDetailsGetRequest($atar_api_key, $atar_id, $number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCashoutBoletoDetailsGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $number Codigo de barras ou linha digitavel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCashoutBoletoDetailsGetRequest($atar_api_key, $atar_id, $number)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCashoutBoletoDetailsGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payCashoutBoletoDetailsGet'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling payCashoutBoletoDetailsGet'
            );
        }

        $resourcePath = '/cashout/boleto/details/{number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCashoutBoletoPost
     *
     * Realiza o pagamento de um boleto
     *
     * @param  \Swagger\Client\Model\CashoutBoletoRequest $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Boleto
     */
    public function payCashoutBoletoPost($body, $atar_api_key, $atar_id)
    {
        list($response) = $this->payCashoutBoletoPostWithHttpInfo($body, $atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payCashoutBoletoPostWithHttpInfo
     *
     * Realiza o pagamento de um boleto
     *
     * @param  \Swagger\Client\Model\CashoutBoletoRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Boleto, HTTP status code, HTTP response headers (array of strings)
     */
    public function payCashoutBoletoPostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Boleto';
        $request = $this->payCashoutBoletoPostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Boleto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payCashoutBoletoPostAsync
     *
     * Realiza o pagamento de um boleto
     *
     * @param  \Swagger\Client\Model\CashoutBoletoRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashoutBoletoPostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payCashoutBoletoPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCashoutBoletoPostAsyncWithHttpInfo
     *
     * Realiza o pagamento de um boleto
     *
     * @param  \Swagger\Client\Model\CashoutBoletoRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashoutBoletoPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Boleto';
        $request = $this->payCashoutBoletoPostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCashoutBoletoPost'
     *
     * @param  \Swagger\Client\Model\CashoutBoletoRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCashoutBoletoPostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payCashoutBoletoPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCashoutBoletoPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payCashoutBoletoPost'
            );
        }

        $resourcePath = '/cashout/boleto';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCashoutPhoneRechargeOptionsGet
     *
     * Get saved cellphone numbers and options for top up
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RechargeOptions
     */
    public function payCashoutPhoneRechargeOptionsGet($atar_api_key, $atar_id)
    {
        list($response) = $this->payCashoutPhoneRechargeOptionsGetWithHttpInfo($atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payCashoutPhoneRechargeOptionsGetWithHttpInfo
     *
     * Get saved cellphone numbers and options for top up
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RechargeOptions, HTTP status code, HTTP response headers (array of strings)
     */
    public function payCashoutPhoneRechargeOptionsGetWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\RechargeOptions';
        $request = $this->payCashoutPhoneRechargeOptionsGetRequest($atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RechargeOptions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payCashoutPhoneRechargeOptionsGetAsync
     *
     * Get saved cellphone numbers and options for top up
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashoutPhoneRechargeOptionsGetAsync($atar_api_key, $atar_id)
    {
        return $this->payCashoutPhoneRechargeOptionsGetAsyncWithHttpInfo($atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCashoutPhoneRechargeOptionsGetAsyncWithHttpInfo
     *
     * Get saved cellphone numbers and options for top up
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashoutPhoneRechargeOptionsGetAsyncWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\RechargeOptions';
        $request = $this->payCashoutPhoneRechargeOptionsGetRequest($atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCashoutPhoneRechargeOptionsGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCashoutPhoneRechargeOptionsGetRequest($atar_api_key, $atar_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCashoutPhoneRechargeOptionsGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payCashoutPhoneRechargeOptionsGet'
            );
        }

        $resourcePath = '/cashout/phone-recharge/options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCashoutPhoneRechargePost
     *
     * Recharge a prepaid phone number.
     *
     * @param  \Swagger\Client\Model\PhoneRechargeRequest $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PhoneRechargeResponse
     */
    public function payCashoutPhoneRechargePost($body, $atar_api_key, $atar_id)
    {
        list($response) = $this->payCashoutPhoneRechargePostWithHttpInfo($body, $atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payCashoutPhoneRechargePostWithHttpInfo
     *
     * Recharge a prepaid phone number.
     *
     * @param  \Swagger\Client\Model\PhoneRechargeRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PhoneRechargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payCashoutPhoneRechargePostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PhoneRechargeResponse';
        $request = $this->payCashoutPhoneRechargePostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PhoneRechargeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payCashoutPhoneRechargePostAsync
     *
     * Recharge a prepaid phone number.
     *
     * @param  \Swagger\Client\Model\PhoneRechargeRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashoutPhoneRechargePostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payCashoutPhoneRechargePostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCashoutPhoneRechargePostAsyncWithHttpInfo
     *
     * Recharge a prepaid phone number.
     *
     * @param  \Swagger\Client\Model\PhoneRechargeRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashoutPhoneRechargePostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PhoneRechargeResponse';
        $request = $this->payCashoutPhoneRechargePostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCashoutPhoneRechargePost'
     *
     * @param  \Swagger\Client\Model\PhoneRechargeRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCashoutPhoneRechargePostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payCashoutPhoneRechargePost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCashoutPhoneRechargePost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payCashoutPhoneRechargePost'
            );
        }

        $resourcePath = '/cashout/phone-recharge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCashoutPhoneRechargeValuesGet
     *
     * Get carrier and recharge values by cellphone number
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $country_code DDI - código do país, apenas números. Ex: Brasil &#x3D; 55; USA &#x3D; 1 (required)
     * @param  string $number Número do celular pré-pago com DDD, apenas números. Ex: 11999991234 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PhoneRechargeValuesResponse
     */
    public function payCashoutPhoneRechargeValuesGet($atar_api_key, $atar_id, $country_code, $number)
    {
        list($response) = $this->payCashoutPhoneRechargeValuesGetWithHttpInfo($atar_api_key, $atar_id, $country_code, $number);
        return $response;
    }

    /**
     * Operation payCashoutPhoneRechargeValuesGetWithHttpInfo
     *
     * Get carrier and recharge values by cellphone number
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $country_code DDI - código do país, apenas números. Ex: Brasil &#x3D; 55; USA &#x3D; 1 (required)
     * @param  string $number Número do celular pré-pago com DDD, apenas números. Ex: 11999991234 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PhoneRechargeValuesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payCashoutPhoneRechargeValuesGetWithHttpInfo($atar_api_key, $atar_id, $country_code, $number)
    {
        $returnType = '\Swagger\Client\Model\PhoneRechargeValuesResponse';
        $request = $this->payCashoutPhoneRechargeValuesGetRequest($atar_api_key, $atar_id, $country_code, $number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PhoneRechargeValuesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payCashoutPhoneRechargeValuesGetAsync
     *
     * Get carrier and recharge values by cellphone number
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $country_code DDI - código do país, apenas números. Ex: Brasil &#x3D; 55; USA &#x3D; 1 (required)
     * @param  string $number Número do celular pré-pago com DDD, apenas números. Ex: 11999991234 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashoutPhoneRechargeValuesGetAsync($atar_api_key, $atar_id, $country_code, $number)
    {
        return $this->payCashoutPhoneRechargeValuesGetAsyncWithHttpInfo($atar_api_key, $atar_id, $country_code, $number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCashoutPhoneRechargeValuesGetAsyncWithHttpInfo
     *
     * Get carrier and recharge values by cellphone number
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $country_code DDI - código do país, apenas números. Ex: Brasil &#x3D; 55; USA &#x3D; 1 (required)
     * @param  string $number Número do celular pré-pago com DDD, apenas números. Ex: 11999991234 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCashoutPhoneRechargeValuesGetAsyncWithHttpInfo($atar_api_key, $atar_id, $country_code, $number)
    {
        $returnType = '\Swagger\Client\Model\PhoneRechargeValuesResponse';
        $request = $this->payCashoutPhoneRechargeValuesGetRequest($atar_api_key, $atar_id, $country_code, $number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCashoutPhoneRechargeValuesGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $country_code DDI - código do país, apenas números. Ex: Brasil &#x3D; 55; USA &#x3D; 1 (required)
     * @param  string $number Número do celular pré-pago com DDD, apenas números. Ex: 11999991234 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCashoutPhoneRechargeValuesGetRequest($atar_api_key, $atar_id, $country_code, $number)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCashoutPhoneRechargeValuesGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payCashoutPhoneRechargeValuesGet'
            );
        }
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling payCashoutPhoneRechargeValuesGet'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling payCashoutPhoneRechargeValuesGet'
            );
        }

        $resourcePath = '/cashout/phone-recharge/values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($country_code !== null) {
            $queryParams['countryCode'] = ObjectSerializer::toQueryValue($country_code, null);
        }
        // query params
        if ($number !== null) {
            $queryParams['number'] = ObjectSerializer::toQueryValue($number, null);
        }
        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCheckoutDelete
     *
     * Nega o checkout
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payCheckoutDelete($atar_api_key, $atar_id, $checkout_id)
    {
        $this->payCheckoutDeleteWithHttpInfo($atar_api_key, $atar_id, $checkout_id);
    }

    /**
     * Operation payCheckoutDeleteWithHttpInfo
     *
     * Nega o checkout
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payCheckoutDeleteWithHttpInfo($atar_api_key, $atar_id, $checkout_id)
    {
        $returnType = '';
        $request = $this->payCheckoutDeleteRequest($atar_api_key, $atar_id, $checkout_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payCheckoutDeleteAsync
     *
     * Nega o checkout
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCheckoutDeleteAsync($atar_api_key, $atar_id, $checkout_id)
    {
        return $this->payCheckoutDeleteAsyncWithHttpInfo($atar_api_key, $atar_id, $checkout_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCheckoutDeleteAsyncWithHttpInfo
     *
     * Nega o checkout
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCheckoutDeleteAsyncWithHttpInfo($atar_api_key, $atar_id, $checkout_id)
    {
        $returnType = '';
        $request = $this->payCheckoutDeleteRequest($atar_api_key, $atar_id, $checkout_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCheckoutDelete'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCheckoutDeleteRequest($atar_api_key, $atar_id, $checkout_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCheckoutDelete'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payCheckoutDelete'
            );
        }
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling payCheckoutDelete'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCheckoutGet
     *
     * Consulta os detalhes do checkout
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Checkout
     */
    public function payCheckoutGet($atar_api_key, $atar_id, $checkout_id)
    {
        list($response) = $this->payCheckoutGetWithHttpInfo($atar_api_key, $atar_id, $checkout_id);
        return $response;
    }

    /**
     * Operation payCheckoutGetWithHttpInfo
     *
     * Consulta os detalhes do checkout
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Checkout, HTTP status code, HTTP response headers (array of strings)
     */
    public function payCheckoutGetWithHttpInfo($atar_api_key, $atar_id, $checkout_id)
    {
        $returnType = '\Swagger\Client\Model\Checkout';
        $request = $this->payCheckoutGetRequest($atar_api_key, $atar_id, $checkout_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Checkout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payCheckoutGetAsync
     *
     * Consulta os detalhes do checkout
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCheckoutGetAsync($atar_api_key, $atar_id, $checkout_id)
    {
        return $this->payCheckoutGetAsyncWithHttpInfo($atar_api_key, $atar_id, $checkout_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCheckoutGetAsyncWithHttpInfo
     *
     * Consulta os detalhes do checkout
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCheckoutGetAsyncWithHttpInfo($atar_api_key, $atar_id, $checkout_id)
    {
        $returnType = '\Swagger\Client\Model\Checkout';
        $request = $this->payCheckoutGetRequest($atar_api_key, $atar_id, $checkout_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCheckoutGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCheckoutGetRequest($atar_api_key, $atar_id, $checkout_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCheckoutGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payCheckoutGet'
            );
        }
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling payCheckoutGet'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCheckoutPut
     *
     * Confirma o checkout e realiza o pagamento
     *
     * @param  \Swagger\Client\Model\CheckoutRequest $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payCheckoutPut($body, $atar_api_key, $atar_id, $checkout_id)
    {
        $this->payCheckoutPutWithHttpInfo($body, $atar_api_key, $atar_id, $checkout_id);
    }

    /**
     * Operation payCheckoutPutWithHttpInfo
     *
     * Confirma o checkout e realiza o pagamento
     *
     * @param  \Swagger\Client\Model\CheckoutRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payCheckoutPutWithHttpInfo($body, $atar_api_key, $atar_id, $checkout_id)
    {
        $returnType = '';
        $request = $this->payCheckoutPutRequest($body, $atar_api_key, $atar_id, $checkout_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payCheckoutPutAsync
     *
     * Confirma o checkout e realiza o pagamento
     *
     * @param  \Swagger\Client\Model\CheckoutRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCheckoutPutAsync($body, $atar_api_key, $atar_id, $checkout_id)
    {
        return $this->payCheckoutPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $checkout_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCheckoutPutAsyncWithHttpInfo
     *
     * Confirma o checkout e realiza o pagamento
     *
     * @param  \Swagger\Client\Model\CheckoutRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCheckoutPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $checkout_id)
    {
        $returnType = '';
        $request = $this->payCheckoutPutRequest($body, $atar_api_key, $atar_id, $checkout_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCheckoutPut'
     *
     * @param  \Swagger\Client\Model\CheckoutRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $checkout_id ID do checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCheckoutPutRequest($body, $atar_api_key, $atar_id, $checkout_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payCheckoutPut'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCheckoutPut'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payCheckoutPut'
            );
        }
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling payCheckoutPut'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payExternalTransferPost
     *
     * Realiza uma transferencia bancaria (TED)
     *
     * @param  \Swagger\Client\Model\ExternalTransferRequest $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TransferResponse
     */
    public function payExternalTransferPost($body, $atar_api_key, $atar_id)
    {
        list($response) = $this->payExternalTransferPostWithHttpInfo($body, $atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payExternalTransferPostWithHttpInfo
     *
     * Realiza uma transferencia bancaria (TED)
     *
     * @param  \Swagger\Client\Model\ExternalTransferRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TransferResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payExternalTransferPostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\TransferResponse';
        $request = $this->payExternalTransferPostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TransferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payExternalTransferPostAsync
     *
     * Realiza uma transferencia bancaria (TED)
     *
     * @param  \Swagger\Client\Model\ExternalTransferRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payExternalTransferPostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payExternalTransferPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payExternalTransferPostAsyncWithHttpInfo
     *
     * Realiza uma transferencia bancaria (TED)
     *
     * @param  \Swagger\Client\Model\ExternalTransferRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payExternalTransferPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\TransferResponse';
        $request = $this->payExternalTransferPostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payExternalTransferPost'
     *
     * @param  \Swagger\Client\Model\ExternalTransferRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payExternalTransferPostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payExternalTransferPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payExternalTransferPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payExternalTransferPost'
            );
        }

        $resourcePath = '/transfer/external';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payHistoryRecentsGet
     *
     * Historico de eventos recentes do usuario a partir ou antes de determinada data
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $page Cursor da pagina desejada. Caso nao seja informado, retorna os ultimos 50 resultados (optional)
     * @param  int $before Recuperar eventos antes dessa data (requerido se after nao informado) (optional)
     * @param  int $after Recuperar eventos depois dessa data (requerido se before nao informado) (optional)
     * @param  int $page_size Quantidade de resultados por pagina. Caso nao seja informado, o padrao de 50 e estabelecido (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Resume
     */
    public function payHistoryRecentsGet($atar_api_key, $atar_id, $page = null, $before = null, $after = null, $page_size = null)
    {
        list($response) = $this->payHistoryRecentsGetWithHttpInfo($atar_api_key, $atar_id, $page, $before, $after, $page_size);
        return $response;
    }

    /**
     * Operation payHistoryRecentsGetWithHttpInfo
     *
     * Historico de eventos recentes do usuario a partir ou antes de determinada data
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $page Cursor da pagina desejada. Caso nao seja informado, retorna os ultimos 50 resultados (optional)
     * @param  int $before Recuperar eventos antes dessa data (requerido se after nao informado) (optional)
     * @param  int $after Recuperar eventos depois dessa data (requerido se before nao informado) (optional)
     * @param  int $page_size Quantidade de resultados por pagina. Caso nao seja informado, o padrao de 50 e estabelecido (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Resume, HTTP status code, HTTP response headers (array of strings)
     */
    public function payHistoryRecentsGetWithHttpInfo($atar_api_key, $atar_id, $page = null, $before = null, $after = null, $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\Resume';
        $request = $this->payHistoryRecentsGetRequest($atar_api_key, $atar_id, $page, $before, $after, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Resume',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payHistoryRecentsGetAsync
     *
     * Historico de eventos recentes do usuario a partir ou antes de determinada data
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $page Cursor da pagina desejada. Caso nao seja informado, retorna os ultimos 50 resultados (optional)
     * @param  int $before Recuperar eventos antes dessa data (requerido se after nao informado) (optional)
     * @param  int $after Recuperar eventos depois dessa data (requerido se before nao informado) (optional)
     * @param  int $page_size Quantidade de resultados por pagina. Caso nao seja informado, o padrao de 50 e estabelecido (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payHistoryRecentsGetAsync($atar_api_key, $atar_id, $page = null, $before = null, $after = null, $page_size = null)
    {
        return $this->payHistoryRecentsGetAsyncWithHttpInfo($atar_api_key, $atar_id, $page, $before, $after, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payHistoryRecentsGetAsyncWithHttpInfo
     *
     * Historico de eventos recentes do usuario a partir ou antes de determinada data
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $page Cursor da pagina desejada. Caso nao seja informado, retorna os ultimos 50 resultados (optional)
     * @param  int $before Recuperar eventos antes dessa data (requerido se after nao informado) (optional)
     * @param  int $after Recuperar eventos depois dessa data (requerido se before nao informado) (optional)
     * @param  int $page_size Quantidade de resultados por pagina. Caso nao seja informado, o padrao de 50 e estabelecido (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payHistoryRecentsGetAsyncWithHttpInfo($atar_api_key, $atar_id, $page = null, $before = null, $after = null, $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\Resume';
        $request = $this->payHistoryRecentsGetRequest($atar_api_key, $atar_id, $page, $before, $after, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payHistoryRecentsGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $page Cursor da pagina desejada. Caso nao seja informado, retorna os ultimos 50 resultados (optional)
     * @param  int $before Recuperar eventos antes dessa data (requerido se after nao informado) (optional)
     * @param  int $after Recuperar eventos depois dessa data (requerido se before nao informado) (optional)
     * @param  int $page_size Quantidade de resultados por pagina. Caso nao seja informado, o padrao de 50 e estabelecido (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payHistoryRecentsGetRequest($atar_api_key, $atar_id, $page = null, $before = null, $after = null, $page_size = null)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payHistoryRecentsGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payHistoryRecentsGet'
            );
        }

        $resourcePath = '/history/recents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($before !== null) {
            $queryParams['before'] = ObjectSerializer::toQueryValue($before, 'int64');
        }
        // query params
        if ($after !== null) {
            $queryParams['after'] = ObjectSerializer::toQueryValue($after, 'int64');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payInternalTransferPost
     *
     * Realiza uma transferencia entre usuarios
     *
     * @param  \Swagger\Client\Model\TransferRequest $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TransferResponse
     */
    public function payInternalTransferPost($body, $atar_api_key, $atar_id)
    {
        list($response) = $this->payInternalTransferPostWithHttpInfo($body, $atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payInternalTransferPostWithHttpInfo
     *
     * Realiza uma transferencia entre usuarios
     *
     * @param  \Swagger\Client\Model\TransferRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TransferResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInternalTransferPostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\TransferResponse';
        $request = $this->payInternalTransferPostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TransferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payInternalTransferPostAsync
     *
     * Realiza uma transferencia entre usuarios
     *
     * @param  \Swagger\Client\Model\TransferRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInternalTransferPostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payInternalTransferPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payInternalTransferPostAsyncWithHttpInfo
     *
     * Realiza uma transferencia entre usuarios
     *
     * @param  \Swagger\Client\Model\TransferRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInternalTransferPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\TransferResponse';
        $request = $this->payInternalTransferPostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payInternalTransferPost'
     *
     * @param  \Swagger\Client\Model\TransferRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payInternalTransferPostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payInternalTransferPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payInternalTransferPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payInternalTransferPost'
            );
        }

        $resourcePath = '/transfer/internal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payNotificationsEmailPost
     *
     * Envia notificacoes por e-mail
     *
     * @param  \Swagger\Client\Model\EmailRequest $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payNotificationsEmailPost($body, $atar_api_key, $atar_id)
    {
        $this->payNotificationsEmailPostWithHttpInfo($body, $atar_api_key, $atar_id);
    }

    /**
     * Operation payNotificationsEmailPostWithHttpInfo
     *
     * Envia notificacoes por e-mail
     *
     * @param  \Swagger\Client\Model\EmailRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payNotificationsEmailPostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '';
        $request = $this->payNotificationsEmailPostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payNotificationsEmailPostAsync
     *
     * Envia notificacoes por e-mail
     *
     * @param  \Swagger\Client\Model\EmailRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payNotificationsEmailPostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payNotificationsEmailPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payNotificationsEmailPostAsyncWithHttpInfo
     *
     * Envia notificacoes por e-mail
     *
     * @param  \Swagger\Client\Model\EmailRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payNotificationsEmailPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '';
        $request = $this->payNotificationsEmailPostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payNotificationsEmailPost'
     *
     * @param  \Swagger\Client\Model\EmailRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payNotificationsEmailPostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payNotificationsEmailPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payNotificationsEmailPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payNotificationsEmailPost'
            );
        }

        $resourcePath = '/notifications/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payNotificationsPushDelete
     *
     * Deleta token do banco de dados e para o envio de push notification
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_uuid Device UUID o qual vai parar de receber notificacoes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payNotificationsPushDelete($atar_api_key, $atar_id, $device_uuid)
    {
        $this->payNotificationsPushDeleteWithHttpInfo($atar_api_key, $atar_id, $device_uuid);
    }

    /**
     * Operation payNotificationsPushDeleteWithHttpInfo
     *
     * Deleta token do banco de dados e para o envio de push notification
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_uuid Device UUID o qual vai parar de receber notificacoes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payNotificationsPushDeleteWithHttpInfo($atar_api_key, $atar_id, $device_uuid)
    {
        $returnType = '';
        $request = $this->payNotificationsPushDeleteRequest($atar_api_key, $atar_id, $device_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payNotificationsPushDeleteAsync
     *
     * Deleta token do banco de dados e para o envio de push notification
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_uuid Device UUID o qual vai parar de receber notificacoes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payNotificationsPushDeleteAsync($atar_api_key, $atar_id, $device_uuid)
    {
        return $this->payNotificationsPushDeleteAsyncWithHttpInfo($atar_api_key, $atar_id, $device_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payNotificationsPushDeleteAsyncWithHttpInfo
     *
     * Deleta token do banco de dados e para o envio de push notification
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_uuid Device UUID o qual vai parar de receber notificacoes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payNotificationsPushDeleteAsyncWithHttpInfo($atar_api_key, $atar_id, $device_uuid)
    {
        $returnType = '';
        $request = $this->payNotificationsPushDeleteRequest($atar_api_key, $atar_id, $device_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payNotificationsPushDelete'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $device_uuid Device UUID o qual vai parar de receber notificacoes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payNotificationsPushDeleteRequest($atar_api_key, $atar_id, $device_uuid)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payNotificationsPushDelete'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payNotificationsPushDelete'
            );
        }
        // verify the required parameter 'device_uuid' is set
        if ($device_uuid === null || (is_array($device_uuid) && count($device_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_uuid when calling payNotificationsPushDelete'
            );
        }

        $resourcePath = '/notifications/push/{deviceUUID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($device_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'deviceUUID' . '}',
                ObjectSerializer::toPathValue($device_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payNotificationsPushPost
     *
     * Salva token para envio de push notification
     *
     * @param  \Swagger\Client\Model\PushRequest $body body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payNotificationsPushPost($body, $atar_api_key, $atar_id)
    {
        $this->payNotificationsPushPostWithHttpInfo($body, $atar_api_key, $atar_id);
    }

    /**
     * Operation payNotificationsPushPostWithHttpInfo
     *
     * Salva token para envio de push notification
     *
     * @param  \Swagger\Client\Model\PushRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payNotificationsPushPostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '';
        $request = $this->payNotificationsPushPostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payNotificationsPushPostAsync
     *
     * Salva token para envio de push notification
     *
     * @param  \Swagger\Client\Model\PushRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payNotificationsPushPostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->payNotificationsPushPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payNotificationsPushPostAsyncWithHttpInfo
     *
     * Salva token para envio de push notification
     *
     * @param  \Swagger\Client\Model\PushRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payNotificationsPushPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '';
        $request = $this->payNotificationsPushPostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payNotificationsPushPost'
     *
     * @param  \Swagger\Client\Model\PushRequest $body (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payNotificationsPushPostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payNotificationsPushPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payNotificationsPushPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payNotificationsPushPost'
            );
        }

        $resourcePath = '/notifications/push';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payPurchasesGet
     *
     * Recupera uma compra do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $purchase ID da compra (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Purchase
     */
    public function payPurchasesGet($atar_api_key, $atar_id, $purchase)
    {
        list($response) = $this->payPurchasesGetWithHttpInfo($atar_api_key, $atar_id, $purchase);
        return $response;
    }

    /**
     * Operation payPurchasesGetWithHttpInfo
     *
     * Recupera uma compra do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $purchase ID da compra (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Purchase, HTTP status code, HTTP response headers (array of strings)
     */
    public function payPurchasesGetWithHttpInfo($atar_api_key, $atar_id, $purchase)
    {
        $returnType = '\Swagger\Client\Model\Purchase';
        $request = $this->payPurchasesGetRequest($atar_api_key, $atar_id, $purchase);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Purchase',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payPurchasesGetAsync
     *
     * Recupera uma compra do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $purchase ID da compra (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payPurchasesGetAsync($atar_api_key, $atar_id, $purchase)
    {
        return $this->payPurchasesGetAsyncWithHttpInfo($atar_api_key, $atar_id, $purchase)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payPurchasesGetAsyncWithHttpInfo
     *
     * Recupera uma compra do usuario
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $purchase ID da compra (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payPurchasesGetAsyncWithHttpInfo($atar_api_key, $atar_id, $purchase)
    {
        $returnType = '\Swagger\Client\Model\Purchase';
        $request = $this->payPurchasesGetRequest($atar_api_key, $atar_id, $purchase);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payPurchasesGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $purchase ID da compra (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payPurchasesGetRequest($atar_api_key, $atar_id, $purchase)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payPurchasesGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payPurchasesGet'
            );
        }
        // verify the required parameter 'purchase' is set
        if ($purchase === null || (is_array($purchase) && count($purchase) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase when calling payPurchasesGet'
            );
        }

        $resourcePath = '/purchases/{purchase}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($purchase !== null) {
            $resourcePath = str_replace(
                '{' . 'purchase' . '}',
                ObjectSerializer::toPathValue($purchase),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payPurchasesPut
     *
     * Atualiza uma compra do usuario
     *
     * @param  \Swagger\Client\Model\CoordsObject $body Coordenadas a inserir (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $purchase ID da compra (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payPurchasesPut($body, $atar_api_key, $atar_id, $purchase)
    {
        $this->payPurchasesPutWithHttpInfo($body, $atar_api_key, $atar_id, $purchase);
    }

    /**
     * Operation payPurchasesPutWithHttpInfo
     *
     * Atualiza uma compra do usuario
     *
     * @param  \Swagger\Client\Model\CoordsObject $body Coordenadas a inserir (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $purchase ID da compra (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payPurchasesPutWithHttpInfo($body, $atar_api_key, $atar_id, $purchase)
    {
        $returnType = '';
        $request = $this->payPurchasesPutRequest($body, $atar_api_key, $atar_id, $purchase);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payPurchasesPutAsync
     *
     * Atualiza uma compra do usuario
     *
     * @param  \Swagger\Client\Model\CoordsObject $body Coordenadas a inserir (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $purchase ID da compra (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payPurchasesPutAsync($body, $atar_api_key, $atar_id, $purchase)
    {
        return $this->payPurchasesPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $purchase)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payPurchasesPutAsyncWithHttpInfo
     *
     * Atualiza uma compra do usuario
     *
     * @param  \Swagger\Client\Model\CoordsObject $body Coordenadas a inserir (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $purchase ID da compra (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payPurchasesPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $purchase)
    {
        $returnType = '';
        $request = $this->payPurchasesPutRequest($body, $atar_api_key, $atar_id, $purchase);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payPurchasesPut'
     *
     * @param  \Swagger\Client\Model\CoordsObject $body Coordenadas a inserir (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $purchase ID da compra (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payPurchasesPutRequest($body, $atar_api_key, $atar_id, $purchase)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payPurchasesPut'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payPurchasesPut'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payPurchasesPut'
            );
        }
        // verify the required parameter 'purchase' is set
        if ($purchase === null || (is_array($purchase) && count($purchase) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase when calling payPurchasesPut'
            );
        }

        $resourcePath = '/purchases/{purchase}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($purchase !== null) {
            $resourcePath = str_replace(
                '{' . 'purchase' . '}',
                ObjectSerializer::toPathValue($purchase),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paySubscriptionGet
     *
     * Recupera o plano ativo no momento
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Plan
     */
    public function paySubscriptionGet($atar_api_key, $atar_id)
    {
        list($response) = $this->paySubscriptionGetWithHttpInfo($atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation paySubscriptionGetWithHttpInfo
     *
     * Recupera o plano ativo no momento
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Plan, HTTP status code, HTTP response headers (array of strings)
     */
    public function paySubscriptionGetWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Plan';
        $request = $this->paySubscriptionGetRequest($atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Plan',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paySubscriptionGetAsync
     *
     * Recupera o plano ativo no momento
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paySubscriptionGetAsync($atar_api_key, $atar_id)
    {
        return $this->paySubscriptionGetAsyncWithHttpInfo($atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paySubscriptionGetAsyncWithHttpInfo
     *
     * Recupera o plano ativo no momento
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paySubscriptionGetAsyncWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Plan';
        $request = $this->paySubscriptionGetRequest($atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paySubscriptionGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function paySubscriptionGetRequest($atar_api_key, $atar_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling paySubscriptionGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling paySubscriptionGet'
            );
        }

        $resourcePath = '/subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paySubscriptionPost
     *
     * Recupera detalhes do plano atrelado ao dispositivo informado
     *
     * @param  \Swagger\Client\Model\SubscriptionRequest $body Codigo de ativacao do dispositivo (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Plan
     */
    public function paySubscriptionPost($body, $atar_api_key, $atar_id)
    {
        list($response) = $this->paySubscriptionPostWithHttpInfo($body, $atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation paySubscriptionPostWithHttpInfo
     *
     * Recupera detalhes do plano atrelado ao dispositivo informado
     *
     * @param  \Swagger\Client\Model\SubscriptionRequest $body Codigo de ativacao do dispositivo (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Plan, HTTP status code, HTTP response headers (array of strings)
     */
    public function paySubscriptionPostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Plan';
        $request = $this->paySubscriptionPostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Plan',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paySubscriptionPostAsync
     *
     * Recupera detalhes do plano atrelado ao dispositivo informado
     *
     * @param  \Swagger\Client\Model\SubscriptionRequest $body Codigo de ativacao do dispositivo (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paySubscriptionPostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->paySubscriptionPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paySubscriptionPostAsyncWithHttpInfo
     *
     * Recupera detalhes do plano atrelado ao dispositivo informado
     *
     * @param  \Swagger\Client\Model\SubscriptionRequest $body Codigo de ativacao do dispositivo (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paySubscriptionPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\Plan';
        $request = $this->paySubscriptionPostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paySubscriptionPost'
     *
     * @param  \Swagger\Client\Model\SubscriptionRequest $body Codigo de ativacao do dispositivo (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function paySubscriptionPostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling paySubscriptionPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling paySubscriptionPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling paySubscriptionPost'
            );
        }

        $resourcePath = '/subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payTransferOptionsGet
     *
     * Retorna as opções disponíveis para transferencia e as tarifas e limites envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TransferOptions
     */
    public function payTransferOptionsGet($atar_api_key, $atar_id)
    {
        list($response) = $this->payTransferOptionsGetWithHttpInfo($atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payTransferOptionsGetWithHttpInfo
     *
     * Retorna as opções disponíveis para transferencia e as tarifas e limites envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TransferOptions, HTTP status code, HTTP response headers (array of strings)
     */
    public function payTransferOptionsGetWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\TransferOptions';
        $request = $this->payTransferOptionsGetRequest($atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TransferOptions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payTransferOptionsGetAsync
     *
     * Retorna as opções disponíveis para transferencia e as tarifas e limites envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payTransferOptionsGetAsync($atar_api_key, $atar_id)
    {
        return $this->payTransferOptionsGetAsyncWithHttpInfo($atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payTransferOptionsGetAsyncWithHttpInfo
     *
     * Retorna as opções disponíveis para transferencia e as tarifas e limites envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payTransferOptionsGetAsyncWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\TransferOptions';
        $request = $this->payTransferOptionsGetRequest($atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payTransferOptionsGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payTransferOptionsGetRequest($atar_api_key, $atar_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payTransferOptionsGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payTransferOptionsGet'
            );
        }

        $resourcePath = '/transfer/options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
