<?php
/**
 * PixApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BaaS - Atar B2B
 *
 * Documentação da API do serviço de Banking as a Service.
 *
 * OpenAPI spec version: v3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PixApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PixApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation payPixOptionsGet
     *
     * Retorna as opções disponíveis para Pix e as tarifas e limites envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixOptions
     */
    public function payPixOptionsGet($atar_api_key, $atar_id)
    {
        list($response) = $this->payPixOptionsGetWithHttpInfo($atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation payPixOptionsGetWithHttpInfo
     *
     * Retorna as opções disponíveis para Pix e as tarifas e limites envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixOptions, HTTP status code, HTTP response headers (array of strings)
     */
    public function payPixOptionsGetWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PixOptions';
        $request = $this->payPixOptionsGetRequest($atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixOptions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payPixOptionsGetAsync
     *
     * Retorna as opções disponíveis para Pix e as tarifas e limites envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payPixOptionsGetAsync($atar_api_key, $atar_id)
    {
        return $this->payPixOptionsGetAsyncWithHttpInfo($atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payPixOptionsGetAsyncWithHttpInfo
     *
     * Retorna as opções disponíveis para Pix e as tarifas e limites envolvidos
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payPixOptionsGetAsyncWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PixOptions';
        $request = $this->payPixOptionsGetRequest($atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payPixOptionsGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payPixOptionsGetRequest($atar_api_key, $atar_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payPixOptionsGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling payPixOptionsGet'
            );
        }

        $resourcePath = '/pix/options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixClaimsDelete
     *
     * Cancela o pedido de portabilidade ou reivindicação
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pixClaimsDelete($atar_api_key, $atar_id, $key)
    {
        $this->pixClaimsDeleteWithHttpInfo($atar_api_key, $atar_id, $key);
    }

    /**
     * Operation pixClaimsDeleteWithHttpInfo
     *
     * Cancela o pedido de portabilidade ou reivindicação
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixClaimsDeleteWithHttpInfo($atar_api_key, $atar_id, $key)
    {
        $returnType = '';
        $request = $this->pixClaimsDeleteRequest($atar_api_key, $atar_id, $key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pixClaimsDeleteAsync
     *
     * Cancela o pedido de portabilidade ou reivindicação
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixClaimsDeleteAsync($atar_api_key, $atar_id, $key)
    {
        return $this->pixClaimsDeleteAsyncWithHttpInfo($atar_api_key, $atar_id, $key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixClaimsDeleteAsyncWithHttpInfo
     *
     * Cancela o pedido de portabilidade ou reivindicação
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixClaimsDeleteAsyncWithHttpInfo($atar_api_key, $atar_id, $key)
    {
        $returnType = '';
        $request = $this->pixClaimsDeleteRequest($atar_api_key, $atar_id, $key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixClaimsDelete'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixClaimsDeleteRequest($atar_api_key, $atar_id, $key)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixClaimsDelete'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixClaimsDelete'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling pixClaimsDelete'
            );
        }

        $resourcePath = '/pix/keys/{key}/claims';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixClaimsPost
     *
     * Realiza o pedido de portabilidade ou reivindicação
     *
     * @param  \Swagger\Client\Model\PixClaimRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixKey
     */
    public function pixClaimsPost($body, $atar_api_key, $atar_id)
    {
        list($response) = $this->pixClaimsPostWithHttpInfo($body, $atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation pixClaimsPostWithHttpInfo
     *
     * Realiza o pedido de portabilidade ou reivindicação
     *
     * @param  \Swagger\Client\Model\PixClaimRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixClaimsPostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PixKey';
        $request = $this->pixClaimsPostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixClaimsPostAsync
     *
     * Realiza o pedido de portabilidade ou reivindicação
     *
     * @param  \Swagger\Client\Model\PixClaimRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixClaimsPostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->pixClaimsPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixClaimsPostAsyncWithHttpInfo
     *
     * Realiza o pedido de portabilidade ou reivindicação
     *
     * @param  \Swagger\Client\Model\PixClaimRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixClaimsPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PixKey';
        $request = $this->pixClaimsPostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixClaimsPost'
     *
     * @param  \Swagger\Client\Model\PixClaimRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixClaimsPostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pixClaimsPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixClaimsPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixClaimsPost'
            );
        }

        $resourcePath = '/pix/keys/claims';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixClaimsPut
     *
     * Realiza o pedido de portabilidade ou reivindicação
     *
     * @param  \Swagger\Client\Model\PixClaimRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixKey
     */
    public function pixClaimsPut($body, $atar_api_key, $atar_id, $key)
    {
        list($response) = $this->pixClaimsPutWithHttpInfo($body, $atar_api_key, $atar_id, $key);
        return $response;
    }

    /**
     * Operation pixClaimsPutWithHttpInfo
     *
     * Realiza o pedido de portabilidade ou reivindicação
     *
     * @param  \Swagger\Client\Model\PixClaimRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixClaimsPutWithHttpInfo($body, $atar_api_key, $atar_id, $key)
    {
        $returnType = '\Swagger\Client\Model\PixKey';
        $request = $this->pixClaimsPutRequest($body, $atar_api_key, $atar_id, $key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixClaimsPutAsync
     *
     * Realiza o pedido de portabilidade ou reivindicação
     *
     * @param  \Swagger\Client\Model\PixClaimRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixClaimsPutAsync($body, $atar_api_key, $atar_id, $key)
    {
        return $this->pixClaimsPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixClaimsPutAsyncWithHttpInfo
     *
     * Realiza o pedido de portabilidade ou reivindicação
     *
     * @param  \Swagger\Client\Model\PixClaimRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixClaimsPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $key)
    {
        $returnType = '\Swagger\Client\Model\PixKey';
        $request = $this->pixClaimsPutRequest($body, $atar_api_key, $atar_id, $key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixClaimsPut'
     *
     * @param  \Swagger\Client\Model\PixClaimRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixClaimsPutRequest($body, $atar_api_key, $atar_id, $key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pixClaimsPut'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixClaimsPut'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixClaimsPut'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling pixClaimsPut'
            );
        }

        $resourcePath = '/pix/keys/{key}/claims';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixDetailDetailIdGet
     *
     * Busca por detalhes de uma transação Pix
     *
     * @param  string $authorization Basic do usuario a realizar a operacao. Exemplo: Basic dXN1YXJpbzpzZW5oYQ&#x3D;&#x3D; (required)
     * @param  string $atar_api_key Chave de acesso a API, informado pela AtarB2B (required)
     * @param  string $atar_id Código de identificação do profile (retorna na hora de criar a entidade) (required)
     * @param  string $detail_id ID do pix (Obtido no /statement da PJ) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixPaymentData
     */
    public function pixDetailDetailIdGet($authorization, $atar_api_key, $atar_id, $detail_id)
    {
        list($response) = $this->pixDetailDetailIdGetWithHttpInfo($authorization, $atar_api_key, $atar_id, $detail_id);
        return $response;
    }

    /**
     * Operation pixDetailDetailIdGetWithHttpInfo
     *
     * Busca por detalhes de uma transação Pix
     *
     * @param  string $authorization Basic do usuario a realizar a operacao. Exemplo: Basic dXN1YXJpbzpzZW5oYQ&#x3D;&#x3D; (required)
     * @param  string $atar_api_key Chave de acesso a API, informado pela AtarB2B (required)
     * @param  string $atar_id Código de identificação do profile (retorna na hora de criar a entidade) (required)
     * @param  string $detail_id ID do pix (Obtido no /statement da PJ) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixPaymentData, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixDetailDetailIdGetWithHttpInfo($authorization, $atar_api_key, $atar_id, $detail_id)
    {
        $returnType = '\Swagger\Client\Model\PixPaymentData';
        $request = $this->pixDetailDetailIdGetRequest($authorization, $atar_api_key, $atar_id, $detail_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixPaymentData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixDetailDetailIdGetAsync
     *
     * Busca por detalhes de uma transação Pix
     *
     * @param  string $authorization Basic do usuario a realizar a operacao. Exemplo: Basic dXN1YXJpbzpzZW5oYQ&#x3D;&#x3D; (required)
     * @param  string $atar_api_key Chave de acesso a API, informado pela AtarB2B (required)
     * @param  string $atar_id Código de identificação do profile (retorna na hora de criar a entidade) (required)
     * @param  string $detail_id ID do pix (Obtido no /statement da PJ) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixDetailDetailIdGetAsync($authorization, $atar_api_key, $atar_id, $detail_id)
    {
        return $this->pixDetailDetailIdGetAsyncWithHttpInfo($authorization, $atar_api_key, $atar_id, $detail_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixDetailDetailIdGetAsyncWithHttpInfo
     *
     * Busca por detalhes de uma transação Pix
     *
     * @param  string $authorization Basic do usuario a realizar a operacao. Exemplo: Basic dXN1YXJpbzpzZW5oYQ&#x3D;&#x3D; (required)
     * @param  string $atar_api_key Chave de acesso a API, informado pela AtarB2B (required)
     * @param  string $atar_id Código de identificação do profile (retorna na hora de criar a entidade) (required)
     * @param  string $detail_id ID do pix (Obtido no /statement da PJ) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixDetailDetailIdGetAsyncWithHttpInfo($authorization, $atar_api_key, $atar_id, $detail_id)
    {
        $returnType = '\Swagger\Client\Model\PixPaymentData';
        $request = $this->pixDetailDetailIdGetRequest($authorization, $atar_api_key, $atar_id, $detail_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixDetailDetailIdGet'
     *
     * @param  string $authorization Basic do usuario a realizar a operacao. Exemplo: Basic dXN1YXJpbzpzZW5oYQ&#x3D;&#x3D; (required)
     * @param  string $atar_api_key Chave de acesso a API, informado pela AtarB2B (required)
     * @param  string $atar_id Código de identificação do profile (retorna na hora de criar a entidade) (required)
     * @param  string $detail_id ID do pix (Obtido no /statement da PJ) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixDetailDetailIdGetRequest($authorization, $atar_api_key, $atar_id, $detail_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling pixDetailDetailIdGet'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixDetailDetailIdGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixDetailDetailIdGet'
            );
        }
        // verify the required parameter 'detail_id' is set
        if ($detail_id === null || (is_array($detail_id) && count($detail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $detail_id when calling pixDetailDetailIdGet'
            );
        }

        $resourcePath = '/pix/detail/{detailId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($detail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'detailId' . '}',
                ObjectSerializer::toPathValue($detail_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixKeyDelete
     *
     * Exclui uma chave Pix
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pixKeyDelete($atar_api_key, $atar_id, $key)
    {
        $this->pixKeyDeleteWithHttpInfo($atar_api_key, $atar_id, $key);
    }

    /**
     * Operation pixKeyDeleteWithHttpInfo
     *
     * Exclui uma chave Pix
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixKeyDeleteWithHttpInfo($atar_api_key, $atar_id, $key)
    {
        $returnType = '';
        $request = $this->pixKeyDeleteRequest($atar_api_key, $atar_id, $key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pixKeyDeleteAsync
     *
     * Exclui uma chave Pix
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeyDeleteAsync($atar_api_key, $atar_id, $key)
    {
        return $this->pixKeyDeleteAsyncWithHttpInfo($atar_api_key, $atar_id, $key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixKeyDeleteAsyncWithHttpInfo
     *
     * Exclui uma chave Pix
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeyDeleteAsyncWithHttpInfo($atar_api_key, $atar_id, $key)
    {
        $returnType = '';
        $request = $this->pixKeyDeleteRequest($atar_api_key, $atar_id, $key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixKeyDelete'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixKeyDeleteRequest($atar_api_key, $atar_id, $key)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixKeyDelete'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixKeyDelete'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling pixKeyDelete'
            );
        }

        $resourcePath = '/pix/keys/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixKeyGet
     *
     * Retornar a chave consultada
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixKey
     */
    public function pixKeyGet($atar_api_key, $atar_id, $key)
    {
        list($response) = $this->pixKeyGetWithHttpInfo($atar_api_key, $atar_id, $key);
        return $response;
    }

    /**
     * Operation pixKeyGetWithHttpInfo
     *
     * Retornar a chave consultada
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixKeyGetWithHttpInfo($atar_api_key, $atar_id, $key)
    {
        $returnType = '\Swagger\Client\Model\PixKey';
        $request = $this->pixKeyGetRequest($atar_api_key, $atar_id, $key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixKeyGetAsync
     *
     * Retornar a chave consultada
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeyGetAsync($atar_api_key, $atar_id, $key)
    {
        return $this->pixKeyGetAsyncWithHttpInfo($atar_api_key, $atar_id, $key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixKeyGetAsyncWithHttpInfo
     *
     * Retornar a chave consultada
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeyGetAsyncWithHttpInfo($atar_api_key, $atar_id, $key)
    {
        $returnType = '\Swagger\Client\Model\PixKey';
        $request = $this->pixKeyGetRequest($atar_api_key, $atar_id, $key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixKeyGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixKeyGetRequest($atar_api_key, $atar_id, $key)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixKeyGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixKeyGet'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling pixKeyGet'
            );
        }

        $resourcePath = '/pix/keys/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixKeyPut
     *
     * Favorita uma chave Pix
     *
     * @param  \Swagger\Client\Model\PixKey $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixKey
     */
    public function pixKeyPut($body, $atar_api_key, $atar_id, $key)
    {
        list($response) = $this->pixKeyPutWithHttpInfo($body, $atar_api_key, $atar_id, $key);
        return $response;
    }

    /**
     * Operation pixKeyPutWithHttpInfo
     *
     * Favorita uma chave Pix
     *
     * @param  \Swagger\Client\Model\PixKey $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixKeyPutWithHttpInfo($body, $atar_api_key, $atar_id, $key)
    {
        $returnType = '\Swagger\Client\Model\PixKey';
        $request = $this->pixKeyPutRequest($body, $atar_api_key, $atar_id, $key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixKeyPutAsync
     *
     * Favorita uma chave Pix
     *
     * @param  \Swagger\Client\Model\PixKey $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeyPutAsync($body, $atar_api_key, $atar_id, $key)
    {
        return $this->pixKeyPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixKeyPutAsyncWithHttpInfo
     *
     * Favorita uma chave Pix
     *
     * @param  \Swagger\Client\Model\PixKey $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeyPutAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $key)
    {
        $returnType = '\Swagger\Client\Model\PixKey';
        $request = $this->pixKeyPutRequest($body, $atar_api_key, $atar_id, $key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixKeyPut'
     *
     * @param  \Swagger\Client\Model\PixKey $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $key Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixKeyPutRequest($body, $atar_api_key, $atar_id, $key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pixKeyPut'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixKeyPut'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixKeyPut'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling pixKeyPut'
            );
        }

        $resourcePath = '/pix/keys/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixKeyShareGet
     *
     * Retorna o arquivo PDF e mensagem para compartilhamento
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $emv Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixKeyShare
     */
    public function pixKeyShareGet($atar_api_key, $atar_id, $emv)
    {
        list($response) = $this->pixKeyShareGetWithHttpInfo($atar_api_key, $atar_id, $emv);
        return $response;
    }

    /**
     * Operation pixKeyShareGetWithHttpInfo
     *
     * Retorna o arquivo PDF e mensagem para compartilhamento
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $emv Chave pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixKeyShare, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixKeyShareGetWithHttpInfo($atar_api_key, $atar_id, $emv)
    {
        $returnType = '\Swagger\Client\Model\PixKeyShare';
        $request = $this->pixKeyShareGetRequest($atar_api_key, $atar_id, $emv);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixKeyShare',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixKeyShareGetAsync
     *
     * Retorna o arquivo PDF e mensagem para compartilhamento
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $emv Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeyShareGetAsync($atar_api_key, $atar_id, $emv)
    {
        return $this->pixKeyShareGetAsyncWithHttpInfo($atar_api_key, $atar_id, $emv)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixKeyShareGetAsyncWithHttpInfo
     *
     * Retorna o arquivo PDF e mensagem para compartilhamento
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $emv Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeyShareGetAsyncWithHttpInfo($atar_api_key, $atar_id, $emv)
    {
        $returnType = '\Swagger\Client\Model\PixKeyShare';
        $request = $this->pixKeyShareGetRequest($atar_api_key, $atar_id, $emv);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixKeyShareGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $emv Chave pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixKeyShareGetRequest($atar_api_key, $atar_id, $emv)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixKeyShareGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixKeyShareGet'
            );
        }
        // verify the required parameter 'emv' is set
        if ($emv === null || (is_array($emv) && count($emv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emv when calling pixKeyShareGet'
            );
        }

        $resourcePath = '/pix/qrcode/{emv}/share';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($emv !== null) {
            $resourcePath = str_replace(
                '{' . 'emv' . '}',
                ObjectSerializer::toPathValue($emv),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixKeysGet
     *
     * Retornar uma lista com as chaves cadastradas
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixKey[]
     */
    public function pixKeysGet($atar_api_key, $atar_id)
    {
        list($response) = $this->pixKeysGetWithHttpInfo($atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation pixKeysGetWithHttpInfo
     *
     * Retornar uma lista com as chaves cadastradas
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixKey[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pixKeysGetWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PixKey[]';
        $request = $this->pixKeysGetRequest($atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixKey[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixKeysGetAsync
     *
     * Retornar uma lista com as chaves cadastradas
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeysGetAsync($atar_api_key, $atar_id)
    {
        return $this->pixKeysGetAsyncWithHttpInfo($atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixKeysGetAsyncWithHttpInfo
     *
     * Retornar uma lista com as chaves cadastradas
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeysGetAsyncWithHttpInfo($atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PixKey[]';
        $request = $this->pixKeysGetRequest($atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixKeysGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixKeysGetRequest($atar_api_key, $atar_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixKeysGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixKeysGet'
            );
        }

        $resourcePath = '/pix/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixKeysPost
     *
     * Realiza o cadastro
     *
     * @param  \Swagger\Client\Model\PixKeyRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixKey
     */
    public function pixKeysPost($body, $atar_api_key, $atar_id)
    {
        list($response) = $this->pixKeysPostWithHttpInfo($body, $atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation pixKeysPostWithHttpInfo
     *
     * Realiza o cadastro
     *
     * @param  \Swagger\Client\Model\PixKeyRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixKeysPostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PixKey';
        $request = $this->pixKeysPostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixKeysPostAsync
     *
     * Realiza o cadastro
     *
     * @param  \Swagger\Client\Model\PixKeyRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeysPostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->pixKeysPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixKeysPostAsyncWithHttpInfo
     *
     * Realiza o cadastro
     *
     * @param  \Swagger\Client\Model\PixKeyRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixKeysPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PixKey';
        $request = $this->pixKeysPostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixKeysPost'
     *
     * @param  \Swagger\Client\Model\PixKeyRequest $body Dados da chave para cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixKeysPostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pixKeysPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixKeysPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixKeysPost'
            );
        }

        $resourcePath = '/pix/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixPaymentPost
     *
     * Realiza um pagamento
     *
     * @param  \Swagger\Client\Model\PixPaymentRequest $body Dados para realizar o pagamento (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixPaymentData
     */
    public function pixPaymentPost($body, $atar_api_key, $atar_id, $atar_idempotency_key)
    {
        list($response) = $this->pixPaymentPostWithHttpInfo($body, $atar_api_key, $atar_id, $atar_idempotency_key);
        return $response;
    }

    /**
     * Operation pixPaymentPostWithHttpInfo
     *
     * Realiza um pagamento
     *
     * @param  \Swagger\Client\Model\PixPaymentRequest $body Dados para realizar o pagamento (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixPaymentData, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixPaymentPostWithHttpInfo($body, $atar_api_key, $atar_id, $atar_idempotency_key)
    {
        $returnType = '\Swagger\Client\Model\PixPaymentData';
        $request = $this->pixPaymentPostRequest($body, $atar_api_key, $atar_id, $atar_idempotency_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixPaymentData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixPaymentPostAsync
     *
     * Realiza um pagamento
     *
     * @param  \Swagger\Client\Model\PixPaymentRequest $body Dados para realizar o pagamento (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixPaymentPostAsync($body, $atar_api_key, $atar_id, $atar_idempotency_key)
    {
        return $this->pixPaymentPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $atar_idempotency_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixPaymentPostAsyncWithHttpInfo
     *
     * Realiza um pagamento
     *
     * @param  \Swagger\Client\Model\PixPaymentRequest $body Dados para realizar o pagamento (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixPaymentPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $atar_idempotency_key)
    {
        $returnType = '\Swagger\Client\Model\PixPaymentData';
        $request = $this->pixPaymentPostRequest($body, $atar_api_key, $atar_id, $atar_idempotency_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixPaymentPost'
     *
     * @param  \Swagger\Client\Model\PixPaymentRequest $body Dados para realizar o pagamento (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixPaymentPostRequest($body, $atar_api_key, $atar_id, $atar_idempotency_key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pixPaymentPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixPaymentPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixPaymentPost'
            );
        }
        // verify the required parameter 'atar_idempotency_key' is set
        if ($atar_idempotency_key === null || (is_array($atar_idempotency_key) && count($atar_idempotency_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_idempotency_key when calling pixPaymentPost'
            );
        }

        $resourcePath = '/pix/payment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }
        // header params
        if ($atar_idempotency_key !== null) {
            $headerParams['Atar-IdempotencyKey'] = ObjectSerializer::toHeaderValue($atar_idempotency_key);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixQrCodeGet
     *
     * Consulta os dados do QR Code
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $emv Código do QR Code (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixPaymentData
     */
    public function pixQrCodeGet($atar_api_key, $atar_id, $emv)
    {
        list($response) = $this->pixQrCodeGetWithHttpInfo($atar_api_key, $atar_id, $emv);
        return $response;
    }

    /**
     * Operation pixQrCodeGetWithHttpInfo
     *
     * Consulta os dados do QR Code
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $emv Código do QR Code (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixPaymentData, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixQrCodeGetWithHttpInfo($atar_api_key, $atar_id, $emv)
    {
        $returnType = '\Swagger\Client\Model\PixPaymentData';
        $request = $this->pixQrCodeGetRequest($atar_api_key, $atar_id, $emv);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixPaymentData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixQrCodeGetAsync
     *
     * Consulta os dados do QR Code
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $emv Código do QR Code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixQrCodeGetAsync($atar_api_key, $atar_id, $emv)
    {
        return $this->pixQrCodeGetAsyncWithHttpInfo($atar_api_key, $atar_id, $emv)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixQrCodeGetAsyncWithHttpInfo
     *
     * Consulta os dados do QR Code
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $emv Código do QR Code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixQrCodeGetAsyncWithHttpInfo($atar_api_key, $atar_id, $emv)
    {
        $returnType = '\Swagger\Client\Model\PixPaymentData';
        $request = $this->pixQrCodeGetRequest($atar_api_key, $atar_id, $emv);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixQrCodeGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $emv Código do QR Code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixQrCodeGetRequest($atar_api_key, $atar_id, $emv)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixQrCodeGet'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixQrCodeGet'
            );
        }
        // verify the required parameter 'emv' is set
        if ($emv === null || (is_array($emv) && count($emv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $emv when calling pixQrCodeGet'
            );
        }

        $resourcePath = '/pix/qrcode/{emv}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($emv !== null) {
            $resourcePath = str_replace(
                '{' . 'emv' . '}',
                ObjectSerializer::toPathValue($emv),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixQrCodePost
     *
     * Gera um Pix com QR Code dinâmico ou estático
     *
     * @param  \Swagger\Client\Model\PixQRCodeRequest $body Dados para gerar o QR Code dinâmico ou estático (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixQRCode
     */
    public function pixQrCodePost($body, $atar_api_key, $atar_id)
    {
        list($response) = $this->pixQrCodePostWithHttpInfo($body, $atar_api_key, $atar_id);
        return $response;
    }

    /**
     * Operation pixQrCodePostWithHttpInfo
     *
     * Gera um Pix com QR Code dinâmico ou estático
     *
     * @param  \Swagger\Client\Model\PixQRCodeRequest $body Dados para gerar o QR Code dinâmico ou estático (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixQRCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixQrCodePostWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PixQRCode';
        $request = $this->pixQrCodePostRequest($body, $atar_api_key, $atar_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixQRCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixQrCodePostAsync
     *
     * Gera um Pix com QR Code dinâmico ou estático
     *
     * @param  \Swagger\Client\Model\PixQRCodeRequest $body Dados para gerar o QR Code dinâmico ou estático (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixQrCodePostAsync($body, $atar_api_key, $atar_id)
    {
        return $this->pixQrCodePostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixQrCodePostAsyncWithHttpInfo
     *
     * Gera um Pix com QR Code dinâmico ou estático
     *
     * @param  \Swagger\Client\Model\PixQRCodeRequest $body Dados para gerar o QR Code dinâmico ou estático (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixQrCodePostAsyncWithHttpInfo($body, $atar_api_key, $atar_id)
    {
        $returnType = '\Swagger\Client\Model\PixQRCode';
        $request = $this->pixQrCodePostRequest($body, $atar_api_key, $atar_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixQrCodePost'
     *
     * @param  \Swagger\Client\Model\PixQRCodeRequest $body Dados para gerar o QR Code dinâmico ou estático (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixQrCodePostRequest($body, $atar_api_key, $atar_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pixQrCodePost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixQrCodePost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixQrCodePost'
            );
        }

        $resourcePath = '/pix/qrcode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixReceipt
     *
     * retorna em base64 o pdf de recibo pix
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $pix_id ID do Pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixReceipt
     */
    public function pixReceipt($atar_api_key, $pix_id)
    {
        list($response) = $this->pixReceiptWithHttpInfo($atar_api_key, $pix_id);
        return $response;
    }

    /**
     * Operation pixReceiptWithHttpInfo
     *
     * retorna em base64 o pdf de recibo pix
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $pix_id ID do Pix (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixReceipt, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixReceiptWithHttpInfo($atar_api_key, $pix_id)
    {
        $returnType = '\Swagger\Client\Model\PixReceipt';
        $request = $this->pixReceiptRequest($atar_api_key, $pix_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixReceipt',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixReceiptAsync
     *
     * retorna em base64 o pdf de recibo pix
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $pix_id ID do Pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixReceiptAsync($atar_api_key, $pix_id)
    {
        return $this->pixReceiptAsyncWithHttpInfo($atar_api_key, $pix_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixReceiptAsyncWithHttpInfo
     *
     * retorna em base64 o pdf de recibo pix
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $pix_id ID do Pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixReceiptAsyncWithHttpInfo($atar_api_key, $pix_id)
    {
        $returnType = '\Swagger\Client\Model\PixReceipt';
        $request = $this->pixReceiptRequest($atar_api_key, $pix_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixReceipt'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $pix_id ID do Pix (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixReceiptRequest($atar_api_key, $pix_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixReceipt'
            );
        }
        // verify the required parameter 'pix_id' is set
        if ($pix_id === null || (is_array($pix_id) && count($pix_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pix_id when calling pixReceipt'
            );
        }

        $resourcePath = '/pix/{pixId}/receipt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }

        // path params
        if ($pix_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pixId' . '}',
                ObjectSerializer::toPathValue($pix_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixRefundPost
     *
     * Realiza a devolução de um recebimento
     *
     * @param  \Swagger\Client\Model\PixRefundRequest $body Dados para realizar o pagamento (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $pix_id Id do pagaento (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixPaymentData
     */
    public function pixRefundPost($body, $atar_api_key, $atar_id, $pix_id)
    {
        list($response) = $this->pixRefundPostWithHttpInfo($body, $atar_api_key, $atar_id, $pix_id);
        return $response;
    }

    /**
     * Operation pixRefundPostWithHttpInfo
     *
     * Realiza a devolução de um recebimento
     *
     * @param  \Swagger\Client\Model\PixRefundRequest $body Dados para realizar o pagamento (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $pix_id Id do pagaento (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixPaymentData, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixRefundPostWithHttpInfo($body, $atar_api_key, $atar_id, $pix_id)
    {
        $returnType = '\Swagger\Client\Model\PixPaymentData';
        $request = $this->pixRefundPostRequest($body, $atar_api_key, $atar_id, $pix_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixPaymentData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixRefundPostAsync
     *
     * Realiza a devolução de um recebimento
     *
     * @param  \Swagger\Client\Model\PixRefundRequest $body Dados para realizar o pagamento (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $pix_id Id do pagaento (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixRefundPostAsync($body, $atar_api_key, $atar_id, $pix_id)
    {
        return $this->pixRefundPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $pix_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixRefundPostAsyncWithHttpInfo
     *
     * Realiza a devolução de um recebimento
     *
     * @param  \Swagger\Client\Model\PixRefundRequest $body Dados para realizar o pagamento (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $pix_id Id do pagaento (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixRefundPostAsyncWithHttpInfo($body, $atar_api_key, $atar_id, $pix_id)
    {
        $returnType = '\Swagger\Client\Model\PixPaymentData';
        $request = $this->pixRefundPostRequest($body, $atar_api_key, $atar_id, $pix_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixRefundPost'
     *
     * @param  \Swagger\Client\Model\PixRefundRequest $body Dados para realizar o pagamento (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_id Identificador da conta (ver &lt;a href&#x3D;\&quot;https://origination-dot-wearatar-dev.appspot.com/docs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API de Originação&lt;/a&gt;) (required)
     * @param  string $pix_id Id do pagaento (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixRefundPostRequest($body, $atar_api_key, $atar_id, $pix_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pixRefundPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixRefundPost'
            );
        }
        // verify the required parameter 'atar_id' is set
        if ($atar_id === null || (is_array($atar_id) && count($atar_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_id when calling pixRefundPost'
            );
        }
        // verify the required parameter 'pix_id' is set
        if ($pix_id === null || (is_array($pix_id) && count($pix_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pix_id when calling pixRefundPost'
            );
        }

        $resourcePath = '/pix/refund/{pixId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_id !== null) {
            $headerParams['Atar-ID'] = ObjectSerializer::toHeaderValue($atar_id);
        }

        // path params
        if ($pix_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pixId' . '}',
                ObjectSerializer::toPathValue($pix_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
