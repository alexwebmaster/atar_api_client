<?php
/**
 * PixEmLoteApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BaaS - Atar B2B
 *
 * Documentação da API do serviço de Banking as a Service.
 *
 * OpenAPI spec version: v3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PixEmLoteApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PixEmLoteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation pixBatchDelete
     *
     * Exlcui um lote e seus itens
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $key Id do lote (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pixBatchDelete($atar_api_key, $key)
    {
        $this->pixBatchDeleteWithHttpInfo($atar_api_key, $key);
    }

    /**
     * Operation pixBatchDeleteWithHttpInfo
     *
     * Exlcui um lote e seus itens
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $key Id do lote (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixBatchDeleteWithHttpInfo($atar_api_key, $key)
    {
        $returnType = '';
        $request = $this->pixBatchDeleteRequest($atar_api_key, $key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pixBatchDeleteAsync
     *
     * Exlcui um lote e seus itens
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $key Id do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchDeleteAsync($atar_api_key, $key)
    {
        return $this->pixBatchDeleteAsyncWithHttpInfo($atar_api_key, $key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixBatchDeleteAsyncWithHttpInfo
     *
     * Exlcui um lote e seus itens
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $key Id do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchDeleteAsyncWithHttpInfo($atar_api_key, $key)
    {
        $returnType = '';
        $request = $this->pixBatchDeleteRequest($atar_api_key, $key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixBatchDelete'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $key Id do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixBatchDeleteRequest($atar_api_key, $key)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixBatchDelete'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling pixBatchDelete'
            );
        }

        $resourcePath = '/pix/batch/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixBatchGet
     *
     * retorna os lotes cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixBatchResponseGet
     */
    public function pixBatchGet($atar_api_key)
    {
        list($response) = $this->pixBatchGetWithHttpInfo($atar_api_key);
        return $response;
    }

    /**
     * Operation pixBatchGetWithHttpInfo
     *
     * retorna os lotes cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixBatchResponseGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixBatchGetWithHttpInfo($atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\PixBatchResponseGet';
        $request = $this->pixBatchGetRequest($atar_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixBatchResponseGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixBatchGetAsync
     *
     * retorna os lotes cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchGetAsync($atar_api_key)
    {
        return $this->pixBatchGetAsyncWithHttpInfo($atar_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixBatchGetAsyncWithHttpInfo
     *
     * retorna os lotes cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchGetAsyncWithHttpInfo($atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\PixBatchResponseGet';
        $request = $this->pixBatchGetRequest($atar_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixBatchGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixBatchGetRequest($atar_api_key)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixBatchGet'
            );
        }

        $resourcePath = '/pix/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixBatchGetCursor
     *
     * retorna os lotes cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $cursor Id do pagaento (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixBatchResponseGet
     */
    public function pixBatchGetCursor($atar_api_key, $cursor)
    {
        list($response) = $this->pixBatchGetCursorWithHttpInfo($atar_api_key, $cursor);
        return $response;
    }

    /**
     * Operation pixBatchGetCursorWithHttpInfo
     *
     * retorna os lotes cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $cursor Id do pagaento (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixBatchResponseGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixBatchGetCursorWithHttpInfo($atar_api_key, $cursor)
    {
        $returnType = '\Swagger\Client\Model\PixBatchResponseGet';
        $request = $this->pixBatchGetCursorRequest($atar_api_key, $cursor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixBatchResponseGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixBatchGetCursorAsync
     *
     * retorna os lotes cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $cursor Id do pagaento (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchGetCursorAsync($atar_api_key, $cursor)
    {
        return $this->pixBatchGetCursorAsyncWithHttpInfo($atar_api_key, $cursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixBatchGetCursorAsyncWithHttpInfo
     *
     * retorna os lotes cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $cursor Id do pagaento (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchGetCursorAsyncWithHttpInfo($atar_api_key, $cursor)
    {
        $returnType = '\Swagger\Client\Model\PixBatchResponseGet';
        $request = $this->pixBatchGetCursorRequest($atar_api_key, $cursor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixBatchGetCursor'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $cursor Id do pagaento (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixBatchGetCursorRequest($atar_api_key, $cursor)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixBatchGetCursor'
            );
        }
        // verify the required parameter 'cursor' is set
        if ($cursor === null || (is_array($cursor) && count($cursor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cursor when calling pixBatchGetCursor'
            );
        }

        $resourcePath = '/pix/batch/{cursor}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }

        // path params
        if ($cursor !== null) {
            $resourcePath = str_replace(
                '{' . 'cursor' . '}',
                ObjectSerializer::toPathValue($cursor),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixBatchItemDelete
     *
     * Exclui um item do lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     * @param  string $item_id Key do item (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pixBatchItemDelete($atar_api_key, $batch_id, $item_id)
    {
        $this->pixBatchItemDeleteWithHttpInfo($atar_api_key, $batch_id, $item_id);
    }

    /**
     * Operation pixBatchItemDeleteWithHttpInfo
     *
     * Exclui um item do lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     * @param  string $item_id Key do item (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixBatchItemDeleteWithHttpInfo($atar_api_key, $batch_id, $item_id)
    {
        $returnType = '';
        $request = $this->pixBatchItemDeleteRequest($atar_api_key, $batch_id, $item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pixBatchItemDeleteAsync
     *
     * Exclui um item do lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     * @param  string $item_id Key do item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchItemDeleteAsync($atar_api_key, $batch_id, $item_id)
    {
        return $this->pixBatchItemDeleteAsyncWithHttpInfo($atar_api_key, $batch_id, $item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixBatchItemDeleteAsyncWithHttpInfo
     *
     * Exclui um item do lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     * @param  string $item_id Key do item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchItemDeleteAsyncWithHttpInfo($atar_api_key, $batch_id, $item_id)
    {
        $returnType = '';
        $request = $this->pixBatchItemDeleteRequest($atar_api_key, $batch_id, $item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixBatchItemDelete'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     * @param  string $item_id Key do item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixBatchItemDeleteRequest($atar_api_key, $batch_id, $item_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixBatchItemDelete'
            );
        }
        // verify the required parameter 'batch_id' is set
        if ($batch_id === null || (is_array($batch_id) && count($batch_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_id when calling pixBatchItemDelete'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling pixBatchItemDelete'
            );
        }

        $resourcePath = '/pix/batch/{batchId}/items/{itemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }

        // path params
        if ($batch_id !== null) {
            $resourcePath = str_replace(
                '{' . 'batchId' . '}',
                ObjectSerializer::toPathValue($batch_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixBatchItemGet
     *
     * retorna os itens do lote cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     * @param  string $batch_id Key do lote (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function pixBatchItemGet($atar_api_key, $atar_idempotency_key, $batch_id)
    {
        list($response) = $this->pixBatchItemGetWithHttpInfo($atar_api_key, $atar_idempotency_key, $batch_id);
        return $response;
    }

    /**
     * Operation pixBatchItemGetWithHttpInfo
     *
     * retorna os itens do lote cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     * @param  string $batch_id Key do lote (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixBatchItemGetWithHttpInfo($atar_api_key, $atar_idempotency_key, $batch_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->pixBatchItemGetRequest($atar_api_key, $atar_idempotency_key, $batch_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixBatchItemGetAsync
     *
     * retorna os itens do lote cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     * @param  string $batch_id Key do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchItemGetAsync($atar_api_key, $atar_idempotency_key, $batch_id)
    {
        return $this->pixBatchItemGetAsyncWithHttpInfo($atar_api_key, $atar_idempotency_key, $batch_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixBatchItemGetAsyncWithHttpInfo
     *
     * retorna os itens do lote cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     * @param  string $batch_id Key do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchItemGetAsyncWithHttpInfo($atar_api_key, $atar_idempotency_key, $batch_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->pixBatchItemGetRequest($atar_api_key, $atar_idempotency_key, $batch_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixBatchItemGet'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     * @param  string $batch_id Key do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixBatchItemGetRequest($atar_api_key, $atar_idempotency_key, $batch_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixBatchItemGet'
            );
        }
        // verify the required parameter 'atar_idempotency_key' is set
        if ($atar_idempotency_key === null || (is_array($atar_idempotency_key) && count($atar_idempotency_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_idempotency_key when calling pixBatchItemGet'
            );
        }
        // verify the required parameter 'batch_id' is set
        if ($batch_id === null || (is_array($batch_id) && count($batch_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_id when calling pixBatchItemGet'
            );
        }

        $resourcePath = '/pix/batch/{batchId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_idempotency_key !== null) {
            $headerParams['Atar-IdempotencyKey'] = ObjectSerializer::toHeaderValue($atar_idempotency_key);
        }

        // path params
        if ($batch_id !== null) {
            $resourcePath = str_replace(
                '{' . 'batchId' . '}',
                ObjectSerializer::toPathValue($batch_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixBatchItemGetCursor
     *
     * retorna os itens do lote cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     * @param  string $cursor Key do lote (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function pixBatchItemGetCursor($atar_api_key, $batch_id, $cursor)
    {
        list($response) = $this->pixBatchItemGetCursorWithHttpInfo($atar_api_key, $batch_id, $cursor);
        return $response;
    }

    /**
     * Operation pixBatchItemGetCursorWithHttpInfo
     *
     * retorna os itens do lote cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     * @param  string $cursor Key do lote (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixBatchItemGetCursorWithHttpInfo($atar_api_key, $batch_id, $cursor)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->pixBatchItemGetCursorRequest($atar_api_key, $batch_id, $cursor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixBatchItemGetCursorAsync
     *
     * retorna os itens do lote cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     * @param  string $cursor Key do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchItemGetCursorAsync($atar_api_key, $batch_id, $cursor)
    {
        return $this->pixBatchItemGetCursorAsyncWithHttpInfo($atar_api_key, $batch_id, $cursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixBatchItemGetCursorAsyncWithHttpInfo
     *
     * retorna os itens do lote cadastrados
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     * @param  string $cursor Key do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchItemGetCursorAsyncWithHttpInfo($atar_api_key, $batch_id, $cursor)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->pixBatchItemGetCursorRequest($atar_api_key, $batch_id, $cursor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixBatchItemGetCursor'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     * @param  string $cursor Key do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixBatchItemGetCursorRequest($atar_api_key, $batch_id, $cursor)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixBatchItemGetCursor'
            );
        }
        // verify the required parameter 'batch_id' is set
        if ($batch_id === null || (is_array($batch_id) && count($batch_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_id when calling pixBatchItemGetCursor'
            );
        }
        // verify the required parameter 'cursor' is set
        if ($cursor === null || (is_array($cursor) && count($cursor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cursor when calling pixBatchItemGetCursor'
            );
        }

        $resourcePath = '/pix/batch/{batchId}/items/{cursor}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }

        // path params
        if ($batch_id !== null) {
            $resourcePath = str_replace(
                '{' . 'batchId' . '}',
                ObjectSerializer::toPathValue($batch_id),
                $resourcePath
            );
        }
        // path params
        if ($cursor !== null) {
            $resourcePath = str_replace(
                '{' . 'cursor' . '}',
                ObjectSerializer::toPathValue($cursor),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixBatchItemPost
     *
     * Insere itens em um lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     * @param  string $batch_id Key do lote (required)
     * @param  \Swagger\Client\Model\PixPaymentRequest[] $body Dados do item do lote (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function pixBatchItemPost($atar_api_key, $atar_idempotency_key, $batch_id, $body = null)
    {
        list($response) = $this->pixBatchItemPostWithHttpInfo($atar_api_key, $atar_idempotency_key, $batch_id, $body);
        return $response;
    }

    /**
     * Operation pixBatchItemPostWithHttpInfo
     *
     * Insere itens em um lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     * @param  string $batch_id Key do lote (required)
     * @param  \Swagger\Client\Model\PixPaymentRequest[] $body Dados do item do lote (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixBatchItemPostWithHttpInfo($atar_api_key, $atar_idempotency_key, $batch_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->pixBatchItemPostRequest($atar_api_key, $atar_idempotency_key, $batch_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixBatchItemPostAsync
     *
     * Insere itens em um lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     * @param  string $batch_id Key do lote (required)
     * @param  \Swagger\Client\Model\PixPaymentRequest[] $body Dados do item do lote (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchItemPostAsync($atar_api_key, $atar_idempotency_key, $batch_id, $body = null)
    {
        return $this->pixBatchItemPostAsyncWithHttpInfo($atar_api_key, $atar_idempotency_key, $batch_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixBatchItemPostAsyncWithHttpInfo
     *
     * Insere itens em um lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     * @param  string $batch_id Key do lote (required)
     * @param  \Swagger\Client\Model\PixPaymentRequest[] $body Dados do item do lote (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchItemPostAsyncWithHttpInfo($atar_api_key, $atar_idempotency_key, $batch_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->pixBatchItemPostRequest($atar_api_key, $atar_idempotency_key, $batch_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixBatchItemPost'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $atar_idempotency_key Chave de idempotência da requisicão no formato UUID4 gerado pelo cliente. Garante que requisicões não serão processadas em duplicidade se informada a mesma chave de idempotência. (required)
     * @param  string $batch_id Key do lote (required)
     * @param  \Swagger\Client\Model\PixPaymentRequest[] $body Dados do item do lote (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixBatchItemPostRequest($atar_api_key, $atar_idempotency_key, $batch_id, $body = null)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixBatchItemPost'
            );
        }
        // verify the required parameter 'atar_idempotency_key' is set
        if ($atar_idempotency_key === null || (is_array($atar_idempotency_key) && count($atar_idempotency_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_idempotency_key when calling pixBatchItemPost'
            );
        }
        // verify the required parameter 'batch_id' is set
        if ($batch_id === null || (is_array($batch_id) && count($batch_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_id when calling pixBatchItemPost'
            );
        }

        $resourcePath = '/pix/batch/{batchId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }
        // header params
        if ($atar_idempotency_key !== null) {
            $headerParams['Atar-IdempotencyKey'] = ObjectSerializer::toHeaderValue($atar_idempotency_key);
        }

        // path params
        if ($batch_id !== null) {
            $resourcePath = str_replace(
                '{' . 'batchId' . '}',
                ObjectSerializer::toPathValue($batch_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixBatchPost
     *
     * Realiza o cadastro de um lote
     *
     * @param  \Swagger\Client\Model\PixBatch $body Dados para realizar o cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixBatchResponse
     */
    public function pixBatchPost($body, $atar_api_key)
    {
        list($response) = $this->pixBatchPostWithHttpInfo($body, $atar_api_key);
        return $response;
    }

    /**
     * Operation pixBatchPostWithHttpInfo
     *
     * Realiza o cadastro de um lote
     *
     * @param  \Swagger\Client\Model\PixBatch $body Dados para realizar o cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixBatchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixBatchPostWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\PixBatchResponse';
        $request = $this->pixBatchPostRequest($body, $atar_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixBatchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixBatchPostAsync
     *
     * Realiza o cadastro de um lote
     *
     * @param  \Swagger\Client\Model\PixBatch $body Dados para realizar o cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchPostAsync($body, $atar_api_key)
    {
        return $this->pixBatchPostAsyncWithHttpInfo($body, $atar_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixBatchPostAsyncWithHttpInfo
     *
     * Realiza o cadastro de um lote
     *
     * @param  \Swagger\Client\Model\PixBatch $body Dados para realizar o cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchPostAsyncWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\PixBatchResponse';
        $request = $this->pixBatchPostRequest($body, $atar_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixBatchPost'
     *
     * @param  \Swagger\Client\Model\PixBatch $body Dados para realizar o cadastro (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixBatchPostRequest($body, $atar_api_key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pixBatchPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixBatchPost'
            );
        }

        $resourcePath = '/pix/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixBatchStartProcessPost
     *
     * Inicia o processamento dos itens do lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function pixBatchStartProcessPost($atar_api_key, $batch_id)
    {
        list($response) = $this->pixBatchStartProcessPostWithHttpInfo($atar_api_key, $batch_id);
        return $response;
    }

    /**
     * Operation pixBatchStartProcessPostWithHttpInfo
     *
     * Inicia o processamento dos itens do lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixBatchStartProcessPostWithHttpInfo($atar_api_key, $batch_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->pixBatchStartProcessPostRequest($atar_api_key, $batch_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixBatchStartProcessPostAsync
     *
     * Inicia o processamento dos itens do lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchStartProcessPostAsync($atar_api_key, $batch_id)
    {
        return $this->pixBatchStartProcessPostAsyncWithHttpInfo($atar_api_key, $batch_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixBatchStartProcessPostAsyncWithHttpInfo
     *
     * Inicia o processamento dos itens do lote
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixBatchStartProcessPostAsyncWithHttpInfo($atar_api_key, $batch_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->pixBatchStartProcessPostRequest($atar_api_key, $batch_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixBatchStartProcessPost'
     *
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $batch_id Key do lote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixBatchStartProcessPostRequest($atar_api_key, $batch_id)
    {
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling pixBatchStartProcessPost'
            );
        }
        // verify the required parameter 'batch_id' is set
        if ($batch_id === null || (is_array($batch_id) && count($batch_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_id when calling pixBatchStartProcessPost'
            );
        }

        $resourcePath = '/pix/batch/{batchId}/start-process';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }

        // path params
        if ($batch_id !== null) {
            $resourcePath = str_replace(
                '{' . 'batchId' . '}',
                ObjectSerializer::toPathValue($batch_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
