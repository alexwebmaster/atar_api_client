<?php
/**
 * UtilsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BaaS - Atar B2B
 *
 * Documentação da API do serviço de Banking as a Service.
 *
 * OpenAPI spec version: v3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * UtilsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UtilsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation payAppVersionPost
     *
     * Retorna se uma versao do app especifica possui atualizacoes e ou obsoleta
     *
     * @param  \Swagger\Client\Model\AppVersionRequest $body API key do desenvolvedor e versao do app atual (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AppVersion
     */
    public function payAppVersionPost($body, $atar_api_key)
    {
        list($response) = $this->payAppVersionPostWithHttpInfo($body, $atar_api_key);
        return $response;
    }

    /**
     * Operation payAppVersionPostWithHttpInfo
     *
     * Retorna se uma versao do app especifica possui atualizacoes e ou obsoleta
     *
     * @param  \Swagger\Client\Model\AppVersionRequest $body API key do desenvolvedor e versao do app atual (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AppVersion, HTTP status code, HTTP response headers (array of strings)
     */
    public function payAppVersionPostWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\AppVersion';
        $request = $this->payAppVersionPostRequest($body, $atar_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AppVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payAppVersionPostAsync
     *
     * Retorna se uma versao do app especifica possui atualizacoes e ou obsoleta
     *
     * @param  \Swagger\Client\Model\AppVersionRequest $body API key do desenvolvedor e versao do app atual (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payAppVersionPostAsync($body, $atar_api_key)
    {
        return $this->payAppVersionPostAsyncWithHttpInfo($body, $atar_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payAppVersionPostAsyncWithHttpInfo
     *
     * Retorna se uma versao do app especifica possui atualizacoes e ou obsoleta
     *
     * @param  \Swagger\Client\Model\AppVersionRequest $body API key do desenvolvedor e versao do app atual (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payAppVersionPostAsyncWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\AppVersion';
        $request = $this->payAppVersionPostRequest($body, $atar_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payAppVersionPost'
     *
     * @param  \Swagger\Client\Model\AppVersionRequest $body API key do desenvolvedor e versao do app atual (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payAppVersionPostRequest($body, $atar_api_key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payAppVersionPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payAppVersionPost'
            );
        }

        $resourcePath = '/utils/app/version';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCboPost
     *
     * Retorna lista de CBOs disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\KeyValue[]
     */
    public function payCboPost($body, $atar_api_key)
    {
        list($response) = $this->payCboPostWithHttpInfo($body, $atar_api_key);
        return $response;
    }

    /**
     * Operation payCboPostWithHttpInfo
     *
     * Retorna lista de CBOs disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\KeyValue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payCboPostWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\KeyValue[]';
        $request = $this->payCboPostRequest($body, $atar_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\KeyValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payCboPostAsync
     *
     * Retorna lista de CBOs disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCboPostAsync($body, $atar_api_key)
    {
        return $this->payCboPostAsyncWithHttpInfo($body, $atar_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCboPostAsyncWithHttpInfo
     *
     * Retorna lista de CBOs disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCboPostAsyncWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\KeyValue[]';
        $request = $this->payCboPostRequest($body, $atar_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCboPost'
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCboPostRequest($body, $atar_api_key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payCboPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCboPost'
            );
        }

        $resourcePath = '/utils/cbo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCitizenshipPost
     *
     * Retorna lista de nacionalidades disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\KeyValue[]
     */
    public function payCitizenshipPost($body, $atar_api_key)
    {
        list($response) = $this->payCitizenshipPostWithHttpInfo($body, $atar_api_key);
        return $response;
    }

    /**
     * Operation payCitizenshipPostWithHttpInfo
     *
     * Retorna lista de nacionalidades disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\KeyValue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payCitizenshipPostWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\KeyValue[]';
        $request = $this->payCitizenshipPostRequest($body, $atar_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\KeyValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payCitizenshipPostAsync
     *
     * Retorna lista de nacionalidades disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCitizenshipPostAsync($body, $atar_api_key)
    {
        return $this->payCitizenshipPostAsyncWithHttpInfo($body, $atar_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCitizenshipPostAsyncWithHttpInfo
     *
     * Retorna lista de nacionalidades disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCitizenshipPostAsyncWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\KeyValue[]';
        $request = $this->payCitizenshipPostRequest($body, $atar_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCitizenshipPost'
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCitizenshipPostRequest($body, $atar_api_key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payCitizenshipPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCitizenshipPost'
            );
        }

        $resourcePath = '/utils/citizenship';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payCountriesPost
     *
     * Retorna lista de paises disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\KeyValue[]
     */
    public function payCountriesPost($body, $atar_api_key)
    {
        list($response) = $this->payCountriesPostWithHttpInfo($body, $atar_api_key);
        return $response;
    }

    /**
     * Operation payCountriesPostWithHttpInfo
     *
     * Retorna lista de paises disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\KeyValue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payCountriesPostWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\KeyValue[]';
        $request = $this->payCountriesPostRequest($body, $atar_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\KeyValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payCountriesPostAsync
     *
     * Retorna lista de paises disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCountriesPostAsync($body, $atar_api_key)
    {
        return $this->payCountriesPostAsyncWithHttpInfo($body, $atar_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payCountriesPostAsyncWithHttpInfo
     *
     * Retorna lista de paises disponiveis no ATAR pay
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payCountriesPostAsyncWithHttpInfo($body, $atar_api_key)
    {
        $returnType = '\Swagger\Client\Model\KeyValue[]';
        $request = $this->payCountriesPostRequest($body, $atar_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payCountriesPost'
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payCountriesPostRequest($body, $atar_api_key)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payCountriesPost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payCountriesPost'
            );
        }

        $resourcePath = '/utils/countries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payZipcodePost
     *
     * Retorna detalhes do endereco via pesquisa por CEP
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $zipcode CEP a ser pesquisado (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Zipcode
     */
    public function payZipcodePost($body, $atar_api_key, $zipcode)
    {
        list($response) = $this->payZipcodePostWithHttpInfo($body, $atar_api_key, $zipcode);
        return $response;
    }

    /**
     * Operation payZipcodePostWithHttpInfo
     *
     * Retorna detalhes do endereco via pesquisa por CEP
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $zipcode CEP a ser pesquisado (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Zipcode, HTTP status code, HTTP response headers (array of strings)
     */
    public function payZipcodePostWithHttpInfo($body, $atar_api_key, $zipcode)
    {
        $returnType = '\Swagger\Client\Model\Zipcode';
        $request = $this->payZipcodePostRequest($body, $atar_api_key, $zipcode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Zipcode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payZipcodePostAsync
     *
     * Retorna detalhes do endereco via pesquisa por CEP
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $zipcode CEP a ser pesquisado (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payZipcodePostAsync($body, $atar_api_key, $zipcode)
    {
        return $this->payZipcodePostAsyncWithHttpInfo($body, $atar_api_key, $zipcode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payZipcodePostAsyncWithHttpInfo
     *
     * Retorna detalhes do endereco via pesquisa por CEP
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $zipcode CEP a ser pesquisado (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payZipcodePostAsyncWithHttpInfo($body, $atar_api_key, $zipcode)
    {
        $returnType = '\Swagger\Client\Model\Zipcode';
        $request = $this->payZipcodePostRequest($body, $atar_api_key, $zipcode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payZipcodePost'
     *
     * @param  \Swagger\Client\Model\ApiKey $body API key do desenvolvedor (required)
     * @param  string $atar_api_key Chave de acesso da API (required)
     * @param  string $zipcode CEP a ser pesquisado (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payZipcodePostRequest($body, $atar_api_key, $zipcode)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling payZipcodePost'
            );
        }
        // verify the required parameter 'atar_api_key' is set
        if ($atar_api_key === null || (is_array($atar_api_key) && count($atar_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atar_api_key when calling payZipcodePost'
            );
        }
        // verify the required parameter 'zipcode' is set
        if ($zipcode === null || (is_array($zipcode) && count($zipcode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zipcode when calling payZipcodePost'
            );
        }

        $resourcePath = '/utils/zipcode/{zipcode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($atar_api_key !== null) {
            $headerParams['Atar-ApiKey'] = ObjectSerializer::toHeaderValue($atar_api_key);
        }

        // path params
        if ($zipcode !== null) {
            $resourcePath = str_replace(
                '{' . 'zipcode' . '}',
                ObjectSerializer::toPathValue($zipcode),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
