<?php
/**
 * CashinOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BaaS - Atar B2B
 *
 * Documentação da API do serviço de Banking as a Service.
 *
 * OpenAPI spec version: v3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CashinOptions Class Doc Comment
 *
 * @category Class
 * @description Opcoes de cashin e seus limites
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CashinOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CashinOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'boleto' => 'bool',
'ted' => 'bool',
'credit_card' => 'bool',
'boleto_limits' => '\Swagger\Client\Model\CashinLimits',
'wallet_limits' => '\Swagger\Client\Model\CashinLimits',
'ted_items' => '\Swagger\Client\Model\BankAccount[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'boleto' => null,
'ted' => null,
'credit_card' => null,
'boleto_limits' => null,
'wallet_limits' => null,
'ted_items' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'boleto' => 'boleto',
'ted' => 'ted',
'credit_card' => 'creditCard',
'boleto_limits' => 'boletoLimits',
'wallet_limits' => 'walletLimits',
'ted_items' => 'tedItems'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'boleto' => 'setBoleto',
'ted' => 'setTed',
'credit_card' => 'setCreditCard',
'boleto_limits' => 'setBoletoLimits',
'wallet_limits' => 'setWalletLimits',
'ted_items' => 'setTedItems'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'boleto' => 'getBoleto',
'ted' => 'getTed',
'credit_card' => 'getCreditCard',
'boleto_limits' => 'getBoletoLimits',
'wallet_limits' => 'getWalletLimits',
'ted_items' => 'getTedItems'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['boleto'] = isset($data['boleto']) ? $data['boleto'] : null;
        $this->container['ted'] = isset($data['ted']) ? $data['ted'] : null;
        $this->container['credit_card'] = isset($data['credit_card']) ? $data['credit_card'] : null;
        $this->container['boleto_limits'] = isset($data['boleto_limits']) ? $data['boleto_limits'] : null;
        $this->container['wallet_limits'] = isset($data['wallet_limits']) ? $data['wallet_limits'] : null;
        $this->container['ted_items'] = isset($data['ted_items']) ? $data['ted_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets boleto
     *
     * @return bool
     */
    public function getBoleto()
    {
        return $this->container['boleto'];
    }

    /**
     * Sets boleto
     *
     * @param bool $boleto indica se possui deposito por boleto
     *
     * @return $this
     */
    public function setBoleto($boleto)
    {
        $this->container['boleto'] = $boleto;

        return $this;
    }

    /**
     * Gets ted
     *
     * @return bool
     */
    public function getTed()
    {
        return $this->container['ted'];
    }

    /**
     * Sets ted
     *
     * @param bool $ted indica se possui deposito por ted
     *
     * @return $this
     */
    public function setTed($ted)
    {
        $this->container['ted'] = $ted;

        return $this;
    }

    /**
     * Gets credit_card
     *
     * @return bool
     */
    public function getCreditCard()
    {
        return $this->container['credit_card'];
    }

    /**
     * Sets credit_card
     *
     * @param bool $credit_card indica se possui deposito por cartao de credito
     *
     * @return $this
     */
    public function setCreditCard($credit_card)
    {
        $this->container['credit_card'] = $credit_card;

        return $this;
    }

    /**
     * Gets boleto_limits
     *
     * @return \Swagger\Client\Model\CashinLimits
     */
    public function getBoletoLimits()
    {
        return $this->container['boleto_limits'];
    }

    /**
     * Sets boleto_limits
     *
     * @param \Swagger\Client\Model\CashinLimits $boleto_limits boleto_limits
     *
     * @return $this
     */
    public function setBoletoLimits($boleto_limits)
    {
        $this->container['boleto_limits'] = $boleto_limits;

        return $this;
    }

    /**
     * Gets wallet_limits
     *
     * @return \Swagger\Client\Model\CashinLimits
     */
    public function getWalletLimits()
    {
        return $this->container['wallet_limits'];
    }

    /**
     * Sets wallet_limits
     *
     * @param \Swagger\Client\Model\CashinLimits $wallet_limits wallet_limits
     *
     * @return $this
     */
    public function setWalletLimits($wallet_limits)
    {
        $this->container['wallet_limits'] = $wallet_limits;

        return $this;
    }

    /**
     * Gets ted_items
     *
     * @return \Swagger\Client\Model\BankAccount[]
     */
    public function getTedItems()
    {
        return $this->container['ted_items'];
    }

    /**
     * Sets ted_items
     *
     * @param \Swagger\Client\Model\BankAccount[] $ted_items ted_items
     *
     * @return $this
     */
    public function setTedItems($ted_items)
    {
        $this->container['ted_items'] = $ted_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
