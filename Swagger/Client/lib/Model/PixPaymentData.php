<?php
/**
 * PixPaymentData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BaaS - Atar B2B
 *
 * Documentação da API do serviço de Banking as a Service.
 *
 * OpenAPI spec version: v3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PixPaymentData Class Doc Comment
 *
 * @category Class
 * @description Dados do pagamento Pix
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PixPaymentData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PixPaymentData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'transaction_id' => 'string',
'transaction_type' => '\Swagger\Client\Model\PixTransactionType',
'transaction_status' => '\Swagger\Client\Model\PixTransactionStatus',
'is_refund' => 'bool',
'timestamp' => 'string',
'due_timestamp' => 'string',
'expiration_timestamp' => 'string',
'discount_timestamp' => 'string',
'fine_timestamp' => 'string',
'interest_timestamp' => 'string',
'amount' => 'int',
'original_amount' => 'int',
'discount_amount' => 'int',
'fine_amount' => 'int',
'interest_amount' => 'int',
'total_refunded_amount' => 'int',
'identifier' => 'string',
'description' => 'string',
'can_change_amount' => 'bool',
'can_pay_after_due_timestamp' => 'bool',
'from' => '\Swagger\Client\Model\PixKey',
'to' => '\Swagger\Client\Model\PixKey',
'original_transaction' => '\Swagger\Client\Model\PixResume'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'transaction_id' => null,
'transaction_type' => null,
'transaction_status' => null,
'is_refund' => null,
'timestamp' => null,
'due_timestamp' => null,
'expiration_timestamp' => null,
'discount_timestamp' => null,
'fine_timestamp' => null,
'interest_timestamp' => null,
'amount' => 'int32',
'original_amount' => 'int32',
'discount_amount' => 'int32',
'fine_amount' => 'int32',
'interest_amount' => 'int32',
'total_refunded_amount' => 'int32',
'identifier' => null,
'description' => null,
'can_change_amount' => null,
'can_pay_after_due_timestamp' => null,
'from' => null,
'to' => null,
'original_transaction' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'transaction_id' => 'transactionId',
'transaction_type' => 'transactionType',
'transaction_status' => 'transactionStatus',
'is_refund' => 'isRefund',
'timestamp' => 'timestamp',
'due_timestamp' => 'dueTimestamp',
'expiration_timestamp' => 'expirationTimestamp',
'discount_timestamp' => 'discountTimestamp',
'fine_timestamp' => 'fineTimestamp',
'interest_timestamp' => 'interestTimestamp',
'amount' => 'amount',
'original_amount' => 'originalAmount',
'discount_amount' => 'discountAmount',
'fine_amount' => 'fineAmount',
'interest_amount' => 'interestAmount',
'total_refunded_amount' => 'totalRefundedAmount',
'identifier' => 'identifier',
'description' => 'description',
'can_change_amount' => 'canChangeAmount',
'can_pay_after_due_timestamp' => 'canPayAfterDueTimestamp',
'from' => 'from',
'to' => 'to',
'original_transaction' => 'originalTransaction'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'transaction_id' => 'setTransactionId',
'transaction_type' => 'setTransactionType',
'transaction_status' => 'setTransactionStatus',
'is_refund' => 'setIsRefund',
'timestamp' => 'setTimestamp',
'due_timestamp' => 'setDueTimestamp',
'expiration_timestamp' => 'setExpirationTimestamp',
'discount_timestamp' => 'setDiscountTimestamp',
'fine_timestamp' => 'setFineTimestamp',
'interest_timestamp' => 'setInterestTimestamp',
'amount' => 'setAmount',
'original_amount' => 'setOriginalAmount',
'discount_amount' => 'setDiscountAmount',
'fine_amount' => 'setFineAmount',
'interest_amount' => 'setInterestAmount',
'total_refunded_amount' => 'setTotalRefundedAmount',
'identifier' => 'setIdentifier',
'description' => 'setDescription',
'can_change_amount' => 'setCanChangeAmount',
'can_pay_after_due_timestamp' => 'setCanPayAfterDueTimestamp',
'from' => 'setFrom',
'to' => 'setTo',
'original_transaction' => 'setOriginalTransaction'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'transaction_id' => 'getTransactionId',
'transaction_type' => 'getTransactionType',
'transaction_status' => 'getTransactionStatus',
'is_refund' => 'getIsRefund',
'timestamp' => 'getTimestamp',
'due_timestamp' => 'getDueTimestamp',
'expiration_timestamp' => 'getExpirationTimestamp',
'discount_timestamp' => 'getDiscountTimestamp',
'fine_timestamp' => 'getFineTimestamp',
'interest_timestamp' => 'getInterestTimestamp',
'amount' => 'getAmount',
'original_amount' => 'getOriginalAmount',
'discount_amount' => 'getDiscountAmount',
'fine_amount' => 'getFineAmount',
'interest_amount' => 'getInterestAmount',
'total_refunded_amount' => 'getTotalRefundedAmount',
'identifier' => 'getIdentifier',
'description' => 'getDescription',
'can_change_amount' => 'getCanChangeAmount',
'can_pay_after_due_timestamp' => 'getCanPayAfterDueTimestamp',
'from' => 'getFrom',
'to' => 'getTo',
'original_transaction' => 'getOriginalTransaction'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['transaction_status'] = isset($data['transaction_status']) ? $data['transaction_status'] : null;
        $this->container['is_refund'] = isset($data['is_refund']) ? $data['is_refund'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['due_timestamp'] = isset($data['due_timestamp']) ? $data['due_timestamp'] : null;
        $this->container['expiration_timestamp'] = isset($data['expiration_timestamp']) ? $data['expiration_timestamp'] : null;
        $this->container['discount_timestamp'] = isset($data['discount_timestamp']) ? $data['discount_timestamp'] : null;
        $this->container['fine_timestamp'] = isset($data['fine_timestamp']) ? $data['fine_timestamp'] : null;
        $this->container['interest_timestamp'] = isset($data['interest_timestamp']) ? $data['interest_timestamp'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['original_amount'] = isset($data['original_amount']) ? $data['original_amount'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['fine_amount'] = isset($data['fine_amount']) ? $data['fine_amount'] : null;
        $this->container['interest_amount'] = isset($data['interest_amount']) ? $data['interest_amount'] : null;
        $this->container['total_refunded_amount'] = isset($data['total_refunded_amount']) ? $data['total_refunded_amount'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['can_change_amount'] = isset($data['can_change_amount']) ? $data['can_change_amount'] : null;
        $this->container['can_pay_after_due_timestamp'] = isset($data['can_pay_after_due_timestamp']) ? $data['can_pay_after_due_timestamp'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['original_transaction'] = isset($data['original_transaction']) ? $data['original_transaction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id do pagamento
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Id da transação
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return \Swagger\Client\Model\PixTransactionType
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param \Swagger\Client\Model\PixTransactionType $transaction_type transaction_type
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return \Swagger\Client\Model\PixTransactionStatus
     */
    public function getTransactionStatus()
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param \Swagger\Client\Model\PixTransactionStatus $transaction_status transaction_status
     *
     * @return $this
     */
    public function setTransactionStatus($transaction_status)
    {
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets is_refund
     *
     * @return bool
     */
    public function getIsRefund()
    {
        return $this->container['is_refund'];
    }

    /**
     * Sets is_refund
     *
     * @param bool $is_refund Indica se é uma devolução
     *
     * @return $this
     */
    public function setIsRefund($is_refund)
    {
        $this->container['is_refund'] = $is_refund;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp Timestamp do pagamento
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets due_timestamp
     *
     * @return string
     */
    public function getDueTimestamp()
    {
        return $this->container['due_timestamp'];
    }

    /**
     * Sets due_timestamp
     *
     * @param string $due_timestamp Timestamp do vencimento
     *
     * @return $this
     */
    public function setDueTimestamp($due_timestamp)
    {
        $this->container['due_timestamp'] = $due_timestamp;

        return $this;
    }

    /**
     * Gets expiration_timestamp
     *
     * @return string
     */
    public function getExpirationTimestamp()
    {
        return $this->container['expiration_timestamp'];
    }

    /**
     * Sets expiration_timestamp
     *
     * @param string $expiration_timestamp Timestamp máximo para pagamento
     *
     * @return $this
     */
    public function setExpirationTimestamp($expiration_timestamp)
    {
        $this->container['expiration_timestamp'] = $expiration_timestamp;

        return $this;
    }

    /**
     * Gets discount_timestamp
     *
     * @return string
     */
    public function getDiscountTimestamp()
    {
        return $this->container['discount_timestamp'];
    }

    /**
     * Sets discount_timestamp
     *
     * @param string $discount_timestamp Timestamp máximo para o desconto
     *
     * @return $this
     */
    public function setDiscountTimestamp($discount_timestamp)
    {
        $this->container['discount_timestamp'] = $discount_timestamp;

        return $this;
    }

    /**
     * Gets fine_timestamp
     *
     * @return string
     */
    public function getFineTimestamp()
    {
        return $this->container['fine_timestamp'];
    }

    /**
     * Sets fine_timestamp
     *
     * @param string $fine_timestamp Timestamp máximo para multa
     *
     * @return $this
     */
    public function setFineTimestamp($fine_timestamp)
    {
        $this->container['fine_timestamp'] = $fine_timestamp;

        return $this;
    }

    /**
     * Gets interest_timestamp
     *
     * @return string
     */
    public function getInterestTimestamp()
    {
        return $this->container['interest_timestamp'];
    }

    /**
     * Sets interest_timestamp
     *
     * @param string $interest_timestamp Timestamp máximo para juros
     *
     * @return $this
     */
    public function setInterestTimestamp($interest_timestamp)
    {
        $this->container['interest_timestamp'] = $interest_timestamp;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Valor total do pagamento
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets original_amount
     *
     * @return int
     */
    public function getOriginalAmount()
    {
        return $this->container['original_amount'];
    }

    /**
     * Sets original_amount
     *
     * @param int $original_amount Valor do pagamento sem juros, multas ou descontos
     *
     * @return $this
     */
    public function setOriginalAmount($original_amount)
    {
        $this->container['original_amount'] = $original_amount;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return int
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param int $discount_amount Valor total do desconto
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets fine_amount
     *
     * @return int
     */
    public function getFineAmount()
    {
        return $this->container['fine_amount'];
    }

    /**
     * Sets fine_amount
     *
     * @param int $fine_amount Valor total da multa
     *
     * @return $this
     */
    public function setFineAmount($fine_amount)
    {
        $this->container['fine_amount'] = $fine_amount;

        return $this;
    }

    /**
     * Gets interest_amount
     *
     * @return int
     */
    public function getInterestAmount()
    {
        return $this->container['interest_amount'];
    }

    /**
     * Sets interest_amount
     *
     * @param int $interest_amount Valor total dos juros
     *
     * @return $this
     */
    public function setInterestAmount($interest_amount)
    {
        $this->container['interest_amount'] = $interest_amount;

        return $this;
    }

    /**
     * Gets total_refunded_amount
     *
     * @return int
     */
    public function getTotalRefundedAmount()
    {
        return $this->container['total_refunded_amount'];
    }

    /**
     * Sets total_refunded_amount
     *
     * @param int $total_refunded_amount Valor total das devoluções
     *
     * @return $this
     */
    public function setTotalRefundedAmount($total_refunded_amount)
    {
        $this->container['total_refunded_amount'] = $total_refunded_amount;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier Descrição do pagamento
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Descrição do pagamento
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets can_change_amount
     *
     * @return bool
     */
    public function getCanChangeAmount()
    {
        return $this->container['can_change_amount'];
    }

    /**
     * Sets can_change_amount
     *
     * @param bool $can_change_amount Indica a possibilidade de alterar o valor do pagamento
     *
     * @return $this
     */
    public function setCanChangeAmount($can_change_amount)
    {
        $this->container['can_change_amount'] = $can_change_amount;

        return $this;
    }

    /**
     * Gets can_pay_after_due_timestamp
     *
     * @return bool
     */
    public function getCanPayAfterDueTimestamp()
    {
        return $this->container['can_pay_after_due_timestamp'];
    }

    /**
     * Sets can_pay_after_due_timestamp
     *
     * @param bool $can_pay_after_due_timestamp Indica a possibilidade de pagar após o vencimento
     *
     * @return $this
     */
    public function setCanPayAfterDueTimestamp($can_pay_after_due_timestamp)
    {
        $this->container['can_pay_after_due_timestamp'] = $can_pay_after_due_timestamp;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \Swagger\Client\Model\PixKey
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \Swagger\Client\Model\PixKey $from from
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \Swagger\Client\Model\PixKey
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \Swagger\Client\Model\PixKey $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets original_transaction
     *
     * @return \Swagger\Client\Model\PixResume
     */
    public function getOriginalTransaction()
    {
        return $this->container['original_transaction'];
    }

    /**
     * Sets original_transaction
     *
     * @param \Swagger\Client\Model\PixResume $original_transaction original_transaction
     *
     * @return $this
     */
    public function setOriginalTransaction($original_transaction)
    {
        $this->container['original_transaction'] = $original_transaction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
