<?php
/**
 * PropertiesPurchaseDenied
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BaaS - Atar B2B
 *
 * Documentação da API do serviço de Banking as a Service.
 *
 * OpenAPI spec version: v3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertiesPurchaseDenied Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertiesPurchaseDenied implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PropertiesPurchaseDenied';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cmd_seq' => 'float',
'dt_capture' => 'string',
'dt_publish' => 'string',
'dt_transaction' => 'string',
'issuer_id' => 'float',
'issuer_name' => 'string',
'operation' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cmd_seq' => null,
'dt_capture' => null,
'dt_publish' => null,
'dt_transaction' => null,
'issuer_id' => null,
'issuer_name' => null,
'operation' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cmd_seq' => 'cmd_seq',
'dt_capture' => 'dt_capture',
'dt_publish' => 'dt_publish',
'dt_transaction' => 'dt_transaction',
'issuer_id' => 'issuer_id',
'issuer_name' => 'issuer_name',
'operation' => 'operation'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cmd_seq' => 'setCmdSeq',
'dt_capture' => 'setDtCapture',
'dt_publish' => 'setDtPublish',
'dt_transaction' => 'setDtTransaction',
'issuer_id' => 'setIssuerId',
'issuer_name' => 'setIssuerName',
'operation' => 'setOperation'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cmd_seq' => 'getCmdSeq',
'dt_capture' => 'getDtCapture',
'dt_publish' => 'getDtPublish',
'dt_transaction' => 'getDtTransaction',
'issuer_id' => 'getIssuerId',
'issuer_name' => 'getIssuerName',
'operation' => 'getOperation'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cmd_seq'] = isset($data['cmd_seq']) ? $data['cmd_seq'] : null;
        $this->container['dt_capture'] = isset($data['dt_capture']) ? $data['dt_capture'] : null;
        $this->container['dt_publish'] = isset($data['dt_publish']) ? $data['dt_publish'] : null;
        $this->container['dt_transaction'] = isset($data['dt_transaction']) ? $data['dt_transaction'] : null;
        $this->container['issuer_id'] = isset($data['issuer_id']) ? $data['issuer_id'] : null;
        $this->container['issuer_name'] = isset($data['issuer_name']) ? $data['issuer_name'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cmd_seq
     *
     * @return float
     */
    public function getCmdSeq()
    {
        return $this->container['cmd_seq'];
    }

    /**
     * Sets cmd_seq
     *
     * @param float $cmd_seq cmd_seq
     *
     * @return $this
     */
    public function setCmdSeq($cmd_seq)
    {
        $this->container['cmd_seq'] = $cmd_seq;

        return $this;
    }

    /**
     * Gets dt_capture
     *
     * @return string
     */
    public function getDtCapture()
    {
        return $this->container['dt_capture'];
    }

    /**
     * Sets dt_capture
     *
     * @param string $dt_capture dt_capture
     *
     * @return $this
     */
    public function setDtCapture($dt_capture)
    {
        $this->container['dt_capture'] = $dt_capture;

        return $this;
    }

    /**
     * Gets dt_publish
     *
     * @return string
     */
    public function getDtPublish()
    {
        return $this->container['dt_publish'];
    }

    /**
     * Sets dt_publish
     *
     * @param string $dt_publish dt_publish
     *
     * @return $this
     */
    public function setDtPublish($dt_publish)
    {
        $this->container['dt_publish'] = $dt_publish;

        return $this;
    }

    /**
     * Gets dt_transaction
     *
     * @return string
     */
    public function getDtTransaction()
    {
        return $this->container['dt_transaction'];
    }

    /**
     * Sets dt_transaction
     *
     * @param string $dt_transaction dt_transaction
     *
     * @return $this
     */
    public function setDtTransaction($dt_transaction)
    {
        $this->container['dt_transaction'] = $dt_transaction;

        return $this;
    }

    /**
     * Gets issuer_id
     *
     * @return float
     */
    public function getIssuerId()
    {
        return $this->container['issuer_id'];
    }

    /**
     * Sets issuer_id
     *
     * @param float $issuer_id issuer_id
     *
     * @return $this
     */
    public function setIssuerId($issuer_id)
    {
        $this->container['issuer_id'] = $issuer_id;

        return $this;
    }

    /**
     * Gets issuer_name
     *
     * @return string
     */
    public function getIssuerName()
    {
        return $this->container['issuer_name'];
    }

    /**
     * Sets issuer_name
     *
     * @param string $issuer_name issuer_name
     *
     * @return $this
     */
    public function setIssuerName($issuer_name)
    {
        $this->container['issuer_name'] = $issuer_name;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
