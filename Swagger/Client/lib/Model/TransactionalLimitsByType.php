<?php
/**
 * TransactionalLimitsByType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BaaS - Atar B2B
 *
 * Documentação da API do serviço de Banking as a Service.
 *
 * OpenAPI spec version: v3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TransactionalLimitsByType Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionalLimitsByType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionalLimitsByType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'atar_id' => 'string',
'type' => 'string',
'max_daily_quantity' => 'float',
'max_daily_quantity_himself' => 'float',
'max_amount_per_transaction' => 'float',
'max_amount_per_transaction_himself' => 'float',
'max_amount_per_day' => 'float',
'max_amount_per_night_hours' => 'float',
'is_enabled_facial_biometrics' => 'bool',
'threshold_amount_facial_biometrics' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'atar_id' => null,
'type' => null,
'max_daily_quantity' => null,
'max_daily_quantity_himself' => null,
'max_amount_per_transaction' => null,
'max_amount_per_transaction_himself' => null,
'max_amount_per_day' => null,
'max_amount_per_night_hours' => null,
'is_enabled_facial_biometrics' => null,
'threshold_amount_facial_biometrics' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'atar_id' => 'atarId',
'type' => 'type',
'max_daily_quantity' => 'maxDailyQuantity',
'max_daily_quantity_himself' => 'maxDailyQuantityHimself',
'max_amount_per_transaction' => 'maxAmountPerTransaction',
'max_amount_per_transaction_himself' => 'maxAmountPerTransactionHimself',
'max_amount_per_day' => 'maxAmountPerDay',
'max_amount_per_night_hours' => 'maxAmountPerNightHours',
'is_enabled_facial_biometrics' => 'isEnabledFacialBiometrics',
'threshold_amount_facial_biometrics' => 'thresholdAmountFacialBiometrics'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'atar_id' => 'setAtarId',
'type' => 'setType',
'max_daily_quantity' => 'setMaxDailyQuantity',
'max_daily_quantity_himself' => 'setMaxDailyQuantityHimself',
'max_amount_per_transaction' => 'setMaxAmountPerTransaction',
'max_amount_per_transaction_himself' => 'setMaxAmountPerTransactionHimself',
'max_amount_per_day' => 'setMaxAmountPerDay',
'max_amount_per_night_hours' => 'setMaxAmountPerNightHours',
'is_enabled_facial_biometrics' => 'setIsEnabledFacialBiometrics',
'threshold_amount_facial_biometrics' => 'setThresholdAmountFacialBiometrics'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'atar_id' => 'getAtarId',
'type' => 'getType',
'max_daily_quantity' => 'getMaxDailyQuantity',
'max_daily_quantity_himself' => 'getMaxDailyQuantityHimself',
'max_amount_per_transaction' => 'getMaxAmountPerTransaction',
'max_amount_per_transaction_himself' => 'getMaxAmountPerTransactionHimself',
'max_amount_per_day' => 'getMaxAmountPerDay',
'max_amount_per_night_hours' => 'getMaxAmountPerNightHours',
'is_enabled_facial_biometrics' => 'getIsEnabledFacialBiometrics',
'threshold_amount_facial_biometrics' => 'getThresholdAmountFacialBiometrics'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['atar_id'] = isset($data['atar_id']) ? $data['atar_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['max_daily_quantity'] = isset($data['max_daily_quantity']) ? $data['max_daily_quantity'] : null;
        $this->container['max_daily_quantity_himself'] = isset($data['max_daily_quantity_himself']) ? $data['max_daily_quantity_himself'] : null;
        $this->container['max_amount_per_transaction'] = isset($data['max_amount_per_transaction']) ? $data['max_amount_per_transaction'] : null;
        $this->container['max_amount_per_transaction_himself'] = isset($data['max_amount_per_transaction_himself']) ? $data['max_amount_per_transaction_himself'] : null;
        $this->container['max_amount_per_day'] = isset($data['max_amount_per_day']) ? $data['max_amount_per_day'] : null;
        $this->container['max_amount_per_night_hours'] = isset($data['max_amount_per_night_hours']) ? $data['max_amount_per_night_hours'] : null;
        $this->container['is_enabled_facial_biometrics'] = isset($data['is_enabled_facial_biometrics']) ? $data['is_enabled_facial_biometrics'] : null;
        $this->container['threshold_amount_facial_biometrics'] = isset($data['threshold_amount_facial_biometrics']) ? $data['threshold_amount_facial_biometrics'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets atar_id
     *
     * @return string
     */
    public function getAtarId()
    {
        return $this->container['atar_id'];
    }

    /**
     * Sets atar_id
     *
     * @param string $atar_id ATAR ID do usuario
     *
     * @return $this
     */
    public function setAtarId($atar_id)
    {
        $this->container['atar_id'] = $atar_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Tipo da modalidade do limite Transacional
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets max_daily_quantity
     *
     * @return float
     */
    public function getMaxDailyQuantity()
    {
        return $this->container['max_daily_quantity'];
    }

    /**
     * Sets max_daily_quantity
     *
     * @param float $max_daily_quantity Valor limite de movimentação diária de terceiros
     *
     * @return $this
     */
    public function setMaxDailyQuantity($max_daily_quantity)
    {
        $this->container['max_daily_quantity'] = $max_daily_quantity;

        return $this;
    }

    /**
     * Gets max_daily_quantity_himself
     *
     * @return float
     */
    public function getMaxDailyQuantityHimself()
    {
        return $this->container['max_daily_quantity_himself'];
    }

    /**
     * Sets max_daily_quantity_himself
     *
     * @param float $max_daily_quantity_himself Valor limite de movimentação diária titular
     *
     * @return $this
     */
    public function setMaxDailyQuantityHimself($max_daily_quantity_himself)
    {
        $this->container['max_daily_quantity_himself'] = $max_daily_quantity_himself;

        return $this;
    }

    /**
     * Gets max_amount_per_transaction
     *
     * @return float
     */
    public function getMaxAmountPerTransaction()
    {
        return $this->container['max_amount_per_transaction'];
    }

    /**
     * Sets max_amount_per_transaction
     *
     * @param float $max_amount_per_transaction Valor limite por transação de terceiros
     *
     * @return $this
     */
    public function setMaxAmountPerTransaction($max_amount_per_transaction)
    {
        $this->container['max_amount_per_transaction'] = $max_amount_per_transaction;

        return $this;
    }

    /**
     * Gets max_amount_per_transaction_himself
     *
     * @return float
     */
    public function getMaxAmountPerTransactionHimself()
    {
        return $this->container['max_amount_per_transaction_himself'];
    }

    /**
     * Sets max_amount_per_transaction_himself
     *
     * @param float $max_amount_per_transaction_himself Valor limite por transação titular
     *
     * @return $this
     */
    public function setMaxAmountPerTransactionHimself($max_amount_per_transaction_himself)
    {
        $this->container['max_amount_per_transaction_himself'] = $max_amount_per_transaction_himself;

        return $this;
    }

    /**
     * Gets max_amount_per_day
     *
     * @return float
     */
    public function getMaxAmountPerDay()
    {
        return $this->container['max_amount_per_day'];
    }

    /**
     * Sets max_amount_per_day
     *
     * @param float $max_amount_per_day Valor limite diário
     *
     * @return $this
     */
    public function setMaxAmountPerDay($max_amount_per_day)
    {
        $this->container['max_amount_per_day'] = $max_amount_per_day;

        return $this;
    }

    /**
     * Gets max_amount_per_night_hours
     *
     * @return float
     */
    public function getMaxAmountPerNightHours()
    {
        return $this->container['max_amount_per_night_hours'];
    }

    /**
     * Sets max_amount_per_night_hours
     *
     * @param float $max_amount_per_night_hours Valor limite noturno
     *
     * @return $this
     */
    public function setMaxAmountPerNightHours($max_amount_per_night_hours)
    {
        $this->container['max_amount_per_night_hours'] = $max_amount_per_night_hours;

        return $this;
    }

    /**
     * Gets is_enabled_facial_biometrics
     *
     * @return bool
     */
    public function getIsEnabledFacialBiometrics()
    {
        return $this->container['is_enabled_facial_biometrics'];
    }

    /**
     * Sets is_enabled_facial_biometrics
     *
     * @param bool $is_enabled_facial_biometrics Indica se o usuário está com biometria facial ativada
     *
     * @return $this
     */
    public function setIsEnabledFacialBiometrics($is_enabled_facial_biometrics)
    {
        $this->container['is_enabled_facial_biometrics'] = $is_enabled_facial_biometrics;

        return $this;
    }

    /**
     * Gets threshold_amount_facial_biometrics
     *
     * @return float
     */
    public function getThresholdAmountFacialBiometrics()
    {
        return $this->container['threshold_amount_facial_biometrics'];
    }

    /**
     * Sets threshold_amount_facial_biometrics
     *
     * @param float $threshold_amount_facial_biometrics Valor limite para movimentação sem a biometria ser requerida
     *
     * @return $this
     */
    public function setThresholdAmountFacialBiometrics($threshold_amount_facial_biometrics)
    {
        $this->container['threshold_amount_facial_biometrics'] = $threshold_amount_facial_biometrics;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
