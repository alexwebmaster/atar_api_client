<?php
/**
 * UserSignupPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BaaS - Atar B2B
 *
 * DocumentaÃ§Ã£o da API do serviÃ§o de Banking as a Service.
 *
 * OpenAPI spec version: v3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserSignupPost Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserSignupPost implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserSignupPost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'full_name' => 'string',
'phone' => 'string',
'gender' => 'string',
'birth_date' => 'string',
'document' => 'string',
'rg_number' => 'string',
'cbo_id' => 'string',
'monthly_income' => 'int',
'patrimony' => 'int',
'mothers_name' => 'string',
'citizenship' => 'string',
'ppe' => 'bool',
'fiscal_country' => 'string',
'has_accepted_residence_declaration' => 'bool',
'has_accepted_terms' => 'bool',
'has_accepted_privacy_policy' => 'bool',
'nif' => 'string',
'addresses' => '\Swagger\Client\Model\Address[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'full_name' => null,
'phone' => null,
'gender' => null,
'birth_date' => null,
'document' => null,
'rg_number' => null,
'cbo_id' => null,
'monthly_income' => null,
'patrimony' => null,
'mothers_name' => null,
'citizenship' => null,
'ppe' => null,
'fiscal_country' => null,
'has_accepted_residence_declaration' => null,
'has_accepted_terms' => null,
'has_accepted_privacy_policy' => null,
'nif' => null,
'addresses' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'full_name' => 'fullName',
'phone' => 'phone',
'gender' => 'gender',
'birth_date' => 'birthDate',
'document' => 'document',
'rg_number' => 'rgNumber',
'cbo_id' => 'cboId',
'monthly_income' => 'monthlyIncome',
'patrimony' => 'patrimony',
'mothers_name' => 'mothersName',
'citizenship' => 'citizenship',
'ppe' => 'ppe',
'fiscal_country' => 'fiscalCountry',
'has_accepted_residence_declaration' => 'hasAcceptedResidenceDeclaration',
'has_accepted_terms' => 'hasAcceptedTerms',
'has_accepted_privacy_policy' => 'hasAcceptedPrivacyPolicy',
'nif' => 'nif',
'addresses' => 'addresses'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'full_name' => 'setFullName',
'phone' => 'setPhone',
'gender' => 'setGender',
'birth_date' => 'setBirthDate',
'document' => 'setDocument',
'rg_number' => 'setRgNumber',
'cbo_id' => 'setCboId',
'monthly_income' => 'setMonthlyIncome',
'patrimony' => 'setPatrimony',
'mothers_name' => 'setMothersName',
'citizenship' => 'setCitizenship',
'ppe' => 'setPpe',
'fiscal_country' => 'setFiscalCountry',
'has_accepted_residence_declaration' => 'setHasAcceptedResidenceDeclaration',
'has_accepted_terms' => 'setHasAcceptedTerms',
'has_accepted_privacy_policy' => 'setHasAcceptedPrivacyPolicy',
'nif' => 'setNif',
'addresses' => 'setAddresses'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'full_name' => 'getFullName',
'phone' => 'getPhone',
'gender' => 'getGender',
'birth_date' => 'getBirthDate',
'document' => 'getDocument',
'rg_number' => 'getRgNumber',
'cbo_id' => 'getCboId',
'monthly_income' => 'getMonthlyIncome',
'patrimony' => 'getPatrimony',
'mothers_name' => 'getMothersName',
'citizenship' => 'getCitizenship',
'ppe' => 'getPpe',
'fiscal_country' => 'getFiscalCountry',
'has_accepted_residence_declaration' => 'getHasAcceptedResidenceDeclaration',
'has_accepted_terms' => 'getHasAcceptedTerms',
'has_accepted_privacy_policy' => 'getHasAcceptedPrivacyPolicy',
'nif' => 'getNif',
'addresses' => 'getAddresses'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['rg_number'] = isset($data['rg_number']) ? $data['rg_number'] : null;
        $this->container['cbo_id'] = isset($data['cbo_id']) ? $data['cbo_id'] : null;
        $this->container['monthly_income'] = isset($data['monthly_income']) ? $data['monthly_income'] : null;
        $this->container['patrimony'] = isset($data['patrimony']) ? $data['patrimony'] : null;
        $this->container['mothers_name'] = isset($data['mothers_name']) ? $data['mothers_name'] : null;
        $this->container['citizenship'] = isset($data['citizenship']) ? $data['citizenship'] : null;
        $this->container['ppe'] = isset($data['ppe']) ? $data['ppe'] : null;
        $this->container['fiscal_country'] = isset($data['fiscal_country']) ? $data['fiscal_country'] : null;
        $this->container['has_accepted_residence_declaration'] = isset($data['has_accepted_residence_declaration']) ? $data['has_accepted_residence_declaration'] : null;
        $this->container['has_accepted_terms'] = isset($data['has_accepted_terms']) ? $data['has_accepted_terms'] : null;
        $this->container['has_accepted_privacy_policy'] = isset($data['has_accepted_privacy_policy']) ? $data['has_accepted_privacy_policy'] : null;
        $this->container['nif'] = isset($data['nif']) ? $data['nif'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name Nome completo do usuario
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Telefone do usuario (DDI + DDI + NUMERO)
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender Genero do usuario
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string $birth_date Timestamp da data de nascimento do usuario
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets document
     *
     * @return string
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param string $document Numero do documento do usuario
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets rg_number
     *
     * @return string
     */
    public function getRgNumber()
    {
        return $this->container['rg_number'];
    }

    /**
     * Sets rg_number
     *
     * @param string $rg_number Numero do RG do usuario
     *
     * @return $this
     */
    public function setRgNumber($rg_number)
    {
        $this->container['rg_number'] = $rg_number;

        return $this;
    }

    /**
     * Gets cbo_id
     *
     * @return string
     */
    public function getCboId()
    {
        return $this->container['cbo_id'];
    }

    /**
     * Sets cbo_id
     *
     * @param string $cbo_id Numero da Classificacao Brasileira de Ocupacoes (cbo) do usuario
     *
     * @return $this
     */
    public function setCboId($cbo_id)
    {
        $this->container['cbo_id'] = $cbo_id;

        return $this;
    }

    /**
     * Gets monthly_income
     *
     * @return int
     */
    public function getMonthlyIncome()
    {
        return $this->container['monthly_income'];
    }

    /**
     * Sets monthly_income
     *
     * @param int $monthly_income Renda mensal do usuario
     *
     * @return $this
     */
    public function setMonthlyIncome($monthly_income)
    {
        $this->container['monthly_income'] = $monthly_income;

        return $this;
    }

    /**
     * Gets patrimony
     *
     * @return int
     */
    public function getPatrimony()
    {
        return $this->container['patrimony'];
    }

    /**
     * Sets patrimony
     *
     * @param int $patrimony Valor do patrimonio do usuario
     *
     * @return $this
     */
    public function setPatrimony($patrimony)
    {
        $this->container['patrimony'] = $patrimony;

        return $this;
    }

    /**
     * Gets mothers_name
     *
     * @return string
     */
    public function getMothersName()
    {
        return $this->container['mothers_name'];
    }

    /**
     * Sets mothers_name
     *
     * @param string $mothers_name Nome completo da mae
     *
     * @return $this
     */
    public function setMothersName($mothers_name)
    {
        $this->container['mothers_name'] = $mothers_name;

        return $this;
    }

    /**
     * Gets citizenship
     *
     * @return string
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     *
     * @param string $citizenship Sigla da nacionalidade (BRA, EST)
     *
     * @return $this
     */
    public function setCitizenship($citizenship)
    {
        $this->container['citizenship'] = $citizenship;

        return $this;
    }

    /**
     * Gets ppe
     *
     * @return bool
     */
    public function getPpe()
    {
        return $this->container['ppe'];
    }

    /**
     * Sets ppe
     *
     * @param bool $ppe Indica se a pessoa e politicamente exposta
     *
     * @return $this
     */
    public function setPpe($ppe)
    {
        $this->container['ppe'] = $ppe;

        return $this;
    }

    /**
     * Gets fiscal_country
     *
     * @return string
     */
    public function getFiscalCountry()
    {
        return $this->container['fiscal_country'];
    }

    /**
     * Sets fiscal_country
     *
     * @param string $fiscal_country Sigla do pais de domicilio fiscal (BRA, ITA, USA)
     *
     * @return $this
     */
    public function setFiscalCountry($fiscal_country)
    {
        $this->container['fiscal_country'] = $fiscal_country;

        return $this;
    }

    /**
     * Gets has_accepted_residence_declaration
     *
     * @return bool
     */
    public function getHasAcceptedResidenceDeclaration()
    {
        return $this->container['has_accepted_residence_declaration'];
    }

    /**
     * Sets has_accepted_residence_declaration
     *
     * @param bool $has_accepted_residence_declaration Indica se a pessoa aceitou os termos de servico
     *
     * @return $this
     */
    public function setHasAcceptedResidenceDeclaration($has_accepted_residence_declaration)
    {
        $this->container['has_accepted_residence_declaration'] = $has_accepted_residence_declaration;

        return $this;
    }

    /**
     * Gets has_accepted_terms
     *
     * @return bool
     */
    public function getHasAcceptedTerms()
    {
        return $this->container['has_accepted_terms'];
    }

    /**
     * Sets has_accepted_terms
     *
     * @param bool $has_accepted_terms Indica se a pessoa aceitou os termos de servico
     *
     * @return $this
     */
    public function setHasAcceptedTerms($has_accepted_terms)
    {
        $this->container['has_accepted_terms'] = $has_accepted_terms;

        return $this;
    }

    /**
     * Gets has_accepted_privacy_policy
     *
     * @return bool
     */
    public function getHasAcceptedPrivacyPolicy()
    {
        return $this->container['has_accepted_privacy_policy'];
    }

    /**
     * Sets has_accepted_privacy_policy
     *
     * @param bool $has_accepted_privacy_policy Indica se a pessoa aceitou as politicas de privacidade
     *
     * @return $this
     */
    public function setHasAcceptedPrivacyPolicy($has_accepted_privacy_policy)
    {
        $this->container['has_accepted_privacy_policy'] = $has_accepted_privacy_policy;

        return $this;
    }

    /**
     * Gets nif
     *
     * @return string
     */
    public function getNif()
    {
        return $this->container['nif'];
    }

    /**
     * Sets nif
     *
     * @param string $nif Numero de identificacao fiscal
     *
     * @return $this
     */
    public function setNif($nif)
    {
        $this->container['nif'] = $nif;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Swagger\Client\Model\Address[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Swagger\Client\Model\Address[] $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
